{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/","text":"[toc] \u6587\u6863\u8bf4\u660e \u00b6 \u672c\u6587\u7528\u4e8e\u89e3\u91ca\u5f53\u524d\u6d41\u4f53\u7f51\u7edc\u540e\u7aef Python \u9879\u76ee\u4e2d\u90e8\u5206\u5199\u6cd5\u7684\u89e3\u91ca\u548c\u4e00\u4e9b\u5f15\u7528\u7684\u7b2c\u4e09\u65b9\u5305\u529f\u80fd\u7684\u4f7f\u7528\u3002 \u672c\u6587\u4ee5 poros \u9879\u76ee\u4e3a\u4f8b(\u4e0b\u6587\u4e0d\u518d\u5177\u4f53\u8bf4\u660e)\uff0c\u672c\u6587\u5199\u4f5c\u65f6\u5176\u4ee3\u7801\u7ed3\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 admin_app . py \u251c\u2500\u2500 app . py # \u670d\u52a1\u5165\u53e3\u6587\u4ef6 \u251c\u2500\u2500 apps # \u5305\u542b app\u5de5\u5382\u548c\u5176\u4ed6\u529f\u80fd\u903b\u8f91 \u251c\u2500\u2500 celery_app . py # \u65b0\u5efa\u4e00\u4e2a celery app \u251c\u2500\u2500 common # \u4e3a\u89e3\u51b3\u51b2\u7a81\u65b0\u5efa\u7684\u6587\u4ef6(\u672a\u786e\u5b9a) \u251c\u2500\u2500 conf # \u914d\u7f6e\u6587\u4ef6 \u251c\u2500\u2500 data # \u524d\u7aef\u793c\u7269\u5217\u8868 \u251c\u2500\u2500 entity # mongodb \u7684\u5b58\u50a8\u5bf9\u8c61 \u251c\u2500\u2500 errors # \u57fa\u7840\u9519\u8bef\u7c7b\u81ea\u5b9a\u4e49\u96c6\u5408 \u251c\u2500\u2500 female_logic # \u5973\u5609\u5bbe\u4e0a\u9ea6\u5956\u52b1\u903b\u8f91 \u251c\u2500\u2500 ipython_config . py # ipython \u914d\u7f6e\u6587\u4ef6(\u7591\u4f3c\u65e0\u6548) \u251c\u2500\u2500 log_config . py # \u65e5\u5fd7\u914d\u7f6e\u5e76\u521d\u59cb\u5316\u90e8\u5206logger\u5bf9\u8c61 \u251c\u2500\u2500 logic # \u4e3b\u8981\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\u5b9e\u73b0 \u251c\u2500\u2500 manage . py # \u4e00\u4e2a\u4e1a\u52a1\u811a\u672c\uff0c\u4ee5ipython\u65b9\u5f0f\u6253\u5370\u7ed3\u679c \u251c\u2500\u2500 redis_client . py # \u521d\u59cb\u5316redis\u5b9e\u4f8b \u251c\u2500\u2500 requirements . txt \u251c\u2500\u2500 restart . sh # shell\u65b9\u5f0f\u91cd\u542f\u7cfb\u7edf\u811a\u672c \u251c\u2500\u2500 run # \u542f\u52a8\u6587\u4ef6\u914d\u7f6e\u96c6\u5408 \u251c\u2500\u2500 schema # orm \u5b9e\u73b0\u5e8f\u5217\u5316\u7684\u96c6\u5408 \u251c\u2500\u2500 setup # docker\u914d\u7f6e\u53ca\u7a0b\u5e8f\u542f\u52a8shell\u811a\u672c \u251c\u2500\u2500 shell_script # shell \u811a\u672c \u251c\u2500\u2500 tasks # \u5f02\u6b65\u4efb\u52a1\u96c6\u5408 \u251c\u2500\u2500 templates # \u540e\u53f0\u524d\u7aef\u6587\u4ef6 \u251c\u2500\u2500 test # \u5355\u5143\u6d4b\u8bd5\u6587\u4ef6\u96c6\u5408 \u251c\u2500\u2500 tmp_scripts # \u4e34\u65f6\u811a\u672c\u96c6\u5408 \u251c\u2500\u2500 util # \u901a\u7528\u5de5\u5177\u96c6\u5408 \u2514\u2500\u2500 views # \u5bf9\u5916\u63a5\u53e3\u96c6\u5408 \u5199\u6cd5 \u00b6 \u5e94\u7528\u521b\u5efa \u00b6 \u9879\u76ee\u521b\u5efa\u91c7\u7528 \u5e94\u7528\u5de5\u5382 \u7684\u65b9\u5f0f\u521b\u5efa app , \u5e76\u521d\u59cb\u5316\u5e94\u7528\u7684\u57fa\u672c\u529f\u80fd. # app.py from apps import create_app app = create_app () # apps/__init__.py def create_app ( config_object = 'conf.settings' ): \"\"\"Create application factory, as explained here: http://flask.pocoo.org/docs/patterns/appfactories/.\"\"\" app = Flask ( __name__ ) app . config . from_object ( config_object ) configure_logger ( app ) filter_warning () register_extensions ( app ) register_sentry ( app ) register_json_encoder ( app ) # register_db(app) register_redis ( app ) register_blueprints ( app ) register_apispec ( app ) register_errorhandler ( app ) register_request_handle ( app ) # register_ab_test() return app \u5177\u4f53\u521d\u59cb\u5316\u529f\u80fd\u5982\u4e0b\uff1a \u5bfc\u5165\u914d\u7f6e\u6587\u4ef6 \u5bfc\u5165\u6587\u4ef6\u65b9\u5f0f\u4e3a\u914d\u7f6e\u5bf9\u8c61\u52a0\u8f7d\u3002\u8bb2\u914d\u7f6e\u6587\u4ef6\u540d\u79f0\u4f5c\u4e3a\u5bf9\u8c61\u540d\u79f0\u5bfc\u5165 \u521d\u59cb\u5316\u65e5\u5fd7\u7ea7\u522b \u914d\u7f6e warning \u65e5\u5fd7\u8fc7\u6ee4\u5668\u3002\u5ffd\u7565 warning \u65e5\u5fd7 \u521d\u59cb\u5316\u63d2\u4ef6(\u8bbe\u7f6e\u7f13\u5b58\u8bb0\u5f55\u5668\u4e3a redis ,\u8bbe\u7f6e\u56db\u4e2a\u4e0d\u540c\u4e1a\u52a1\u573a\u666f\u7684\u5f02\u6b65 celery ) \u6ce8\u518c sentry \u65e5\u5fd7\u76d1\u5bdf\u6a21\u5757 \u81ea\u5b9a\u4e49\u5e94\u7528 json \u5e8f\u5217\u5316\u5668 \u8fde\u63a5 redis \u6ce8\u518c\u84dd\u56fe \u6ce8\u518c swagger api \u7ba1\u7406\u6a21\u5757 \u81ea\u5b9a\u4e49\u9519\u8bef\u5904\u7406\u6a21\u5757 \u751f\u547d\u5468\u671f\u8bb0\u5f55 \u53e6\u6709 before_request \u521d\u59cb\u5316\u53c2\u6570\u4f4d\u7f6e\u7edf\u4e00\u653e\u5230 request.all_param \u4e2d \u4ec5 json \u53c2\u6570\u548c args \u53c2\u6570 \u8fd8\u6709 after_request \u7edf\u4e00\u6253\u5370\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u7684 ip \u5730\u5740\u3001\u5177\u4f53\u8def\u5f84\u3001\u8bbf\u95ee\u65b9\u5f0f\u3001\u53c2\u6570\u5185\u5bb9\u3001\u8fd4\u56de\u7ed3\u679c\u3001\u8fd4\u56de\u72b6\u6001\u7b49\u6570\u636e\u3002 swagger \u548c flask-apispec \u8bbf\u95ee\u6570\u636e\u4e0d\u7528\u6253\u5370\u8be6\u7ec6\u65e5\u5fd7 \u63a5\u53e3\u7f16\u5199\u4e0e\u8fd4\u56de \u00b6 \u63a5\u53e3\u7f16\u5199\u91c7\u7528\u51fd\u6570\u89c6\u56fe\uff0c\u4e00\u822c\u8f85\u4e4b\u4ee5\u4e00\u5b9a\u7684\u88c5\u9970\u5668\u3002 \u5e38\u7528\u7684\u88c5\u9970\u5668\u6709\u4f5c\u4e3a\u89c6\u56fe\u51fd\u6570\u7684\u8def\u7531\u8bbe\u5b9a\uff0c\u53c2\u6570\u6821\u9a8c\uff0c\u8fd4\u56de\u6570\u636e\u9650\u5b9a\u4e0e\u683c\u5f0f\u5316\uff0c\u548c\u767b\u5f55\u8ba4\u8bc1\u56db\u79cd\u3002 \u63a5\u53e3\u4e1a\u52a1\u903b\u8f91\u5185\u5bb9\u4ee5 mongodb \u548c redis \u4e92\u76f8\u914d\u5408\uff0c\u52a0\u4e4b\u4e00\u5b9a\u7684\u4e1a\u52a1\u903b\u8f91\u4e3a\u4e3b\u3002 \u4ee5 apps/couple/get_newr_female_list \u51fd\u6570\u4e3a\u4f8b\u3002\u622a\u53d6\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a @couple_app . route ( '/near_female/list' , methods = [ 'POST' ]) # \u8def\u7531\u8bbe\u7f6e\u65b9\u5f0f @use_kwargs ({ 'only_voice_room' : fields . Bool ( required = True , description = '\u662f\u5426\u5f00\u9ed1\u623f' )}) # \u5fc5\u8981\u53c2\u6570\u8bbe\u7f6e\u4e0e\u6ce8\u91ca @marshal_with ( NearFemaleSchema ( many = True ), apply = False ) # \u8fd4\u56de\u6570\u636e\u683c\u5f0f @login_required () # \u9650\u5b9a\u767b\u5f55\u7528\u6237 def get_near_female_list ( only_voice_room ): \"\"\"\u83b7\u53d6\u719f\u4eba\u5217\u8868\"\"\" user = request . user # \u9650\u5b9a\u767b\u5f55\u7528\u6237\u63a5\u53e3\u4f1a\u7531 login_required \u88c5\u9970\u5668\u6839\u636e\u7528\u6237\u7684 token \u67e5\u8be2\u7528\u6237\u4fe1\u606f\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u4fe1\u606f\u5230 request.user \u4e2d if not NearListTest . is_test_group ( user . user_id ): return response_util . response ( response_util . RetCodeAndMessage . Success , data = []) # \u5411 mongodb \u67e5\u8be2\u6570\u636e rooms = CoupleRoom . objects_not_delete ( is_online = True , room_type__in = ( CoupleRoom . CoupleRoomType . DEFAULT , CoupleRoom . CoupleRoomType . FIVE_ROOM )) if only_voice_room : rooms = rooms ( only_voice_room = True , voice_chatting = None ) else : rooms = rooms ( only_voice_room__ne = True , voice_chatting = None ) user_ip = request . headers . get ( \"X-Real-Ip\" , \"\" ) test_couple_room_user = rds . smembers ( 'test_couple_room_user' ) near_female_map = NearScoreSvc . get_near_map ( user . user_id , score = 15 ) data_list = [] for room in rooms : # \u6d4b\u8bd5\u623f\u95f4\u4ec5\u516c\u53f8ip or \u6d4b\u8bd5\u767d\u540d\u5355 \u663e\u793a if ( IsCoupleRoomWhite . is_white_account ( room . room_id ) and user_ip != constants . OFFICE_IP and user . user_id not in test_couple_room_user ): continue on_mic_user_map = room . get_room_on_mic_user_map () has_male = on_mic_user_map . get ( CoupleRoom . MicPosition . MIC1 ) if room . room_type == CoupleRoom . CoupleRoomType . FIVE_ROOM : has_male = has_male and on_mic_user_map . get ( CoupleRoom . MicPosition . MIC3 ) for position , mic_info in on_mic_user_map . items (): if position not in ( CoupleRoom . MicPosition . ANCHOR , CoupleRoom . MicPosition . MIC2 , CoupleRoom . MicPosition . MIC4 ): continue female_id = mic_info [ 'user_id' ] # \u8df3\u8fc7\u975e\u719f\u4eba\u623f\u95f4 if female_id not in near_female_map : continue data_list . append ({ 'room_id' : room . room_id , 'im_room_id' : room . im_room_id , 'female_uid' : female_id , 'status_str' : '\u5f00\u9ed1\u4e2d' if room . voice_chatting else '\u6b63\u5728\u627eCP' , 'has_male' : bool ( has_male ), 'room_type' : room . room_type , 'near_score' : int ( near_female_map . get ( female_id )), 'mic_pos' : mic_info . get ( 'position' , - 1 ) }) # \u6392\u5e8f \u53d6\u524d20\u4e2a data_list . sort ( key = lambda x : ( x [ 'has_male' ], - near_female_map . get ( x [ 'female_uid' ], 0 ))) data_list = data_list [: 20 ] fill_user_info ( data_list , user_id_key = 'female_uid' ) # \u81ea\u5b9a\u4e49response\u5904\u7406\u5668\uff0c\u53ef\u7f13\u5b58\u63a5\u53e3\u6570\u636e\uff0c\u6dfb\u52a0\u90e8\u5206\u53c2\u6570(im_video_token) return response_util . response ( response_util . RetCodeAndMessage . Success , data = data_list ) \u63a5\u53e3\u7684\u88c5\u9970\u5668\u6570\u91cf\u548c\u5fc5\u8981\u6027\u5e94\u6839\u636e\u5b9e\u9645\u63a5\u53e3\u8bf7\u6c42\u4e3a\u51c6\u3002 \u8fd4\u56de\u7ed3\u679c\u4e5f\u5e76\u4e0d\u4e00\u5b9a\u5b8c\u5168\u91c7\u7528\u81ea\u5b9a\u4e49\u7684 response_util.response .(\u5982 poros/views/gift/gift_list_info \u89c6\u56fe\u51fd\u6570) \u5305 \u00b6 \u6b64\u9879\u76ee\u91c7\u7528\u4e3b\u8981\u5b58\u50a8\u65b9\u5f0f\u4e3a mongodb \uff0c\u5e76\u91c7\u7528\u4e86 restful \u5f62\u5f0f\u7684 api \u7ba1\u7406\u3002\u5728\u4ee3\u7801\u4e2d\u6d89\u53ca\u5230\u4e86\u8f83\u591a\u7684\u5305\u7684\u4f7f\u7528\u3002 \u8fd9\u91cc\u9644\u4e0a\u90e8\u5206\u5305\u7684\u4ecb\u7ecd\u8bf4\u660e\u548c\u4f7f\u7528\u65b9\u5f0f marshmallow \u00b6 marshmallow \u662f\u4e00\u4e2a\u7528\u6765\u5c06\u590d\u6742\u7684 orm \u5bf9\u8c61\u4e0e python \u539f\u751f\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362\u7684\u5e93\uff0c\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u5b9e\u73b0 object -> dict \uff0c objects -> list , string -> dict \u548c string -> list \u3002 \u5e8f\u5217\u5316\uff1a\u5e8f\u5217\u5316\u7684\u610f\u601d\u662f\u5c06\u6570\u636e\u5bf9\u8c61\u8f6c\u5316\u4e3a\u53ef\u5b58\u50a8\u6216\u53ef\u4f20\u8f93\u7684\u6570\u636e\u7c7b\u578b \u53cd\u5e8f\u5217\u5316\uff1a\u5c06\u53ef\u5b58\u50a8\u6216\u53ef\u4f20\u8f93\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u5316\u4e3a\u6570\u636e\u5bf9\u8c61 \u8981\u8fdb\u884c\u5e8f\u5217\u5316\u6216\u53cd\u5e8f\u5217\u5316\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7528\u6765\u64cd\u4f5c\u7684object\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff1a import datetime as dt class User : def __init__ ( self , name , email ): self . name = name self . email = email self . created_time = dt . datetime . now () def __repr__ ( self ): return \"<User(name= {self.name!r} )>\" . format ( self = self ) 1\u3001Scheme \u00b6 \u8981\u5bf9\u4e00\u4e2a\u7c7b\u6216\u8005\u4e00\u4e2ajson\u6570\u636e\u5b9e\u73b0\u76f8\u4e92\u8f6c\u6362(\u5373\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316), \u9700\u8981\u4e00\u4e2a\u4e2d\u95f4\u8f7d\u4f53, \u8fd9\u4e2a\u8f7d\u4f53\u5c31\u662fSchema\uff0c\u53e6\u5916Schema\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u6570\u636e\u9a8c\u8bc1\u3002 # \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684Scheme from marshmallow import Schema , fields class UserSchema ( Schema ): name = fields . String () email = fields . Email () created_time = fields . DateTime () 2\u3001Serializing(\u5e8f\u5217\u5316) \u00b6 \u4f7f\u7528scheme\u7684dump()\u65b9\u6cd5\u6765\u5e8f\u5217\u5316\u5bf9\u8c61\uff0c\u8fd4\u56de\u7684\u662fdict\u683c\u5f0f\u7684\u6570\u636e \u53e6\u5916schema\u7684dumps()\u65b9\u6cd5\u5e8f\u5217\u5316\u5bf9\u8c61\uff0c\u8fd4\u56de\u7684\u662fjson\u7f16\u7801\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002 user = User ( \"lhh\" , \"2432783449@qq.com\" ) schema = UserSchema () res = schema . dump ( user ) print ( res ) # { ' email ' : ' 2432783449 @qq.com ' , ' created_time ' : ' 2021 - 05 - 28 20 : 43 : 08.946112 ' , ' name ' : ' lhh ' } dict res2 = schema . dumps ( user ) print ( res2 ) # ' { \"name\" : \"lhh\" , \"email\" : \"2432783449@qq.com\" , \"created_time\" : \"2021-05-28 20:45:17.418739\" } ' json 3\u3001\u8fc7\u6ee4\u8f93\u51fa \u00b6 \u5f53\u4e0d\u9700\u8981\u8f93\u51fa\u6240\u6709\u7684\u5b57\u6bb5\u65f6\uff0c\u53ef\u4ee5\u5728\u5b9e\u4f8b\u5316Scheme\u65f6\uff0c\u58f0\u660eonly\u53c2\u6570\uff0c\u6765\u6307\u5b9a\u8f93\u51fa\uff1a summary_schema = UserSchema ( only = { \"name\" , \"email\" }) res = summary_schema . dump ( user ) print ( res ) # { \"name\" : \"lhh\" , \"email\" : \"2432783449@qq.com\" } 4\u3001Deserializing(\u53cd\u5e8f\u5217\u5316) \u00b6 schema\u7684load()\u65b9\u6cd5\u4e0edump()\u65b9\u6cd5\u76f8\u53cd\uff0c\u7528\u4e8edict\u7c7b\u578b\u7684\u53cd\u5e8f\u5217\u5316\u3002\u4ed6\u5c06\u8f93\u5165\u7684\u5b57\u5178\u683c\u5f0f\u6570\u636e\u8f6c\u6362\u6210\u5e94\u7528\u5c42\u6570\u636e\u7ed3\u6784\u3002\u4ed6\u4e5f\u80fd\u8d77\u5230\u9a8c\u8bc1\u8f93\u5165\u7684\u5b57\u5178\u683c\u5f0f\u6570\u636e\u7684\u4f5c\u7528\u3002 \u540c\u6837\uff0c\u4e5f\u6709\u5bf9json\u89e3\u7801\u7684loads()\u65b9\u6cd5\u3002\u7528\u4e8estring\u7c7b\u578b\u7684\u53cd\u5e8f\u5217\u5316\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cload()\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u5f53\u8f93\u5165\u7684\u6570\u636e\u7684\u503c\u4e0d\u5339\u914d\u5b57\u6bb5\u7c7b\u578b\u65f6\uff0c\u629b\u51fa ValidationError \u5f02\u5e38\u3002 user_data = { \"name\" : \"lhh\" , \"email\" : \"2432783449@qq.com\" , \"created_time\" : \"2021-05-28 20:45:17.418739\" } schema = UserSchema () res = schema . load ( user_data ) print ( res ) # { ' created_time ' : ' 2021 - 05 - 28 20 : 45 : 17.418739 ' , ' email ' : ' 2432783449 @qq.com ' , ' name ' : ' lhh ' } \u5bf9\u53cd\u5e8f\u5217\u5316\u800c\u8a00, \u5c06\u4f20\u5165\u7684dict\u53d8\u6210object\u66f4\u52a0\u6709\u610f\u4e49. \u5728Marshmallow\u4e2d, dict -> object\u7684\u65b9\u6cd5\u9700\u8981\u81ea\u5df1\u5b9e\u73b0, \u7136\u540e\u5728\u8be5\u65b9\u6cd5\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a\u88c5\u9970\u5668post_load\u5373\u53ef class UserSchema ( Schema ): name = fields . String () email = fields . Email () created_time = fields . DateTime () @post_load def make_user ( self , data ): return User ( ** data ) \u8fd9\u6837\u6bcf\u6b21\u8c03\u7528load()\u65b9\u6cd5\u65f6, \u4f1a\u6309\u7167make_user\u7684\u903b\u8f91, \u8fd4\u56de\u4e00\u4e2aUser\u7c7b\u5bf9\u8c61\u3002 user_data = { \"name\" : \"lhh\" , \"email\" : \"2432783449@qq.com\" } schema = UserSchema () res = schema . load ( user_data ) print ( res ) # < __main__ . User object at 0x0000027BE9678128 > user = res print ( \"name: {} email: {}\" . format ( user . name , user . email )) # name : lhh email : 2432783449 @qq.com 5\u3001\u5904\u7406\u591a\u4e2a\u5bf9\u8c61\u7684\u96c6\u5408 \u00b6 \u591a\u4e2a\u5bf9\u8c61\u7684\u96c6\u5408\u5982\u679c\u662f\u53ef\u8fed\u4ee3\u7684\uff0c\u90a3\u4e48\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5bf9\u8fd9\u4e2a\u96c6\u5408\u8fdb\u884c\u5e8f\u5217\u5316\u6216\u8005\u53cd\u5e8f\u5217\u5316\u3002\u5728\u5b9e\u4f8b\u5316Scheme\u7c7b\u65f6\u8bbe\u7f6e\u53c2\u6570many=True \u4e5f\u53ef\u4ee5\u4e0d\u5728\u5b9e\u4f8b\u5316\u7c7b\u7684\u65f6\u5019\u8bbe\u7f6e\uff0c\u800c\u5728\u8c03\u7528dump()\u65b9\u6cd5\u7684\u65f6\u5019\u4f20\u5165\u8fd9\u4e2a\u53c2\u6570\u3002 user1 = User ( name = \"lhh1\" , email = \"2432783449@qq.com\" ) user2 = User ( name = \"lhh2\" , email = \"2432783449@qq.com\" ) users = [ user1 , user2 ] # \u7b2c\u4e00\u79cd\u65b9\u6cd5 schema = UserSchema ( many = True ) res = schema . dump ( users ) print ( res ) # \u7b2c\u4e8c\u79cd\u65b9\u6cd5 schema = UserSchema () res = schema . dump ( users , many = True ) print ( res ) # [ { ' name ' : u ' Mick ' , # ' email ' : u ' mick @stones.com ' , # ' created_at ' : ' 2014 - 08 - 17 T14 : 58 : 57.600623 + 00 : 00 ' } # { ' name ' : u ' Keith ' , # ' email ' : u ' keith @stones.com ' , # ' created_at ' : ' 2014 - 08 - 17 T14 : 58 : 57.600623 + 00 : 00 ' } ] 6\u3001Validation(\u9a8c\u8bc1) \u00b6 \u5f53\u4e0d\u5408\u6cd5\u7684\u6570\u636e\u901a\u8fc7Schema.load()\u6216\u8005Schema.loads()\u65f6\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a ValidationError \u5f02\u5e38\u3002ValidationError.messages\u5c5e\u6027\u6709\u9a8c\u8bc1\u9519\u8bef\u4fe1\u606f\uff0c\u9a8c\u8bc1\u901a\u8fc7\u7684\u6570\u636e\u5728 ValidationError.valid_data \u5c5e\u6027\u4e2d \u6211\u4eec\u6355\u83b7\u8fd9\u4e2a\u5f02\u5e38\uff0c\u7136\u540e\u505a\u5f02\u5e38\u5904\u7406\u3002\u9996\u5148\u9700\u8981\u5bfc\u5165ValidationError\u8fd9\u4e2a\u5f02\u5e38 from marshmallow import Schema , fields , ValidationError class UserSchema ( Schema ): name = fields . String () email = fields . Email () created_time = fields . DateTime () try : res = UserSchema (). load ({ \"name\" : \"lhh\" , \"email\" : \"lhh\" }) except ValidationError as e : print ( f \"\u9519\u8bef\u4fe1\u606f\uff1a{e.messages} \u5408\u6cd5\u6570\u636e:{e.valid_data}\" ) ''' \u5f53\u9a8c\u8bc1\u4e00\u4e2a\u6570\u636e\u96c6\u5408\u7684\u65f6\u5019 \uff0c \u8fd4\u56de\u7684\u9519\u8bef\u4fe1\u606f\u4f1a\u4ee5 \u9519\u8bef\u5e8f\u53f7 - \u9519\u8bef\u4fe1\u606f \u7684\u952e\u503c\u5bf9\u5f62\u5f0f\u4fdd\u5b58\u5728errors\u4e2d ''' user_data = [ { ' email ' : ' 2432783449 @qq.com ' , ' name ' : ' lhh ' }, { ' email ' : ' invalid ' , ' name ' : ' Invalid ' }, { ' name ' : ' wcy ' }, { ' email ' : ' 2432783449 @qq.com ' }, ] try : schema = UserSchema ( many = True ) res = schema . load ( user_data ) print ( res ) except ValidationError as e : print ( \"\u9519\u8bef\u4fe1\u606f\uff1a{} \u5408\u6cd5\u6570\u636e\uff1a{}\" . format ( e . messages , e . valid_data )) \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\uff0c\u6709\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u5bf9\u4e8e\u6ca1\u6709\u4f20\u5165\u7684\u5c5e\u6027\u5219\u6ca1\u6709\u68c0\u67e5\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u89c4\u5b9a\u5c5e\u6027\u5fc5\u987b\u4f20\u5165\u3002 \u5728Schema\u91cc\u89c4\u5b9a\u4e0d\u53ef\u7f3a\u7701\u5b57\u6bb5\uff1a\u8bbe\u7f6e\u53c2\u6570required=True \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\uff0c\u6709\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u5bf9\u4e8e\u6ca1\u6709\u4f20\u5165\u7684\u5c5e\u6027\u5219\u6ca1\u6709\u68c0\u67e5\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u89c4\u5b9a\u5c5e\u6027\u5fc5\u987b\u4f20\u5165\u3002 \u5728Schema\u91cc\u89c4\u5b9a\u4e0d\u53ef\u7f3a\u7701\u5b57\u6bb5\uff1a\u8bbe\u7f6e\u53c2\u6570required=True 6.1 \u81ea\u5b9a\u4e49\u9a8c\u8bc1\u4fe1\u606f \u00b6 \u5728\u7f16\u5199Schema\u7c7b\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5411\u5185\u5efa\u7684fields\u4e2d\u8bbe\u7f6evalidate\u53c2\u6570\u7684\u503c\u6765\u5b9a\u5236\u9a8c\u8bc1\u7684\u903b\u8f91, validate\u7684\u503c\u53ef\u4ee5\u662f\u51fd\u6570, \u533f\u540d\u51fd\u6570lambda, \u6216\u8005\u662f\u5b9a\u4e49\u4e86**call**\u7684\u5bf9\u8c61\u3002 from marshmallow import Schema , fields , ValidationError class UserSchema ( Schema ): name = fields . String ( required = True , validate = lambda s : len ( s ) < 6 ) email = fields . Email () created_time = fields . DateTime () user_data = { \"name\" : \"InvalidName\" , \"email\" : \"2432783449@qq.com\" } try : res = UserSchema () . load ( user_data ) except ValidationError as e : print ( e . messages ) \u5728\u9a8c\u8bc1\u51fd\u6570\u4e2d\u81ea\u5b9a\u4e49\u5f02\u5e38\u4fe1\u606f\uff1a #encoding=utf-8 from marshmallow import Schema , fields , ValidationError def validate_name ( name ): if len ( name ) <= 2 : raise ValidationError ( \"name\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e2\u4f4d\" ) if len ( name ) >= 6 : raise ValidationError ( \"name\u957f\u5ea6\u4e0d\u80fd\u5927\u4e8e6\u4f4d\" ) class UserSchema ( Schema ): name = fields . String ( required = True , validate = validate_name ) email = fields . Email () created_time = fields . DateTime () user_data = { \"name\" : \"InvalidName\" , \"email\" : \"2432783449@qq.com\" } try : res = UserSchema () . load ( user_data ) except ValidationError as e : print ( e . messages ) \u6ce8\u610f \uff1a\u53ea\u4f1a\u5728\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u53d1\u751f\u9a8c\u8bc1\uff01\u5e8f\u5217\u5316\u7684\u65f6\u5019\u4e0d\u4f1a\u9a8c\u8bc1\uff01 6.2 \u5c06\u9a8c\u8bc1\u51fd\u6570\u5199\u5728Schema\u4e2d\u53d8\u6210\u9a8c\u8bc1\u65b9\u6cd5 \u00b6 \u5728Schema\u4e2d\uff0c\u4f7f\u7528validates\u88c5\u9970\u5668\u5c31\u53ef\u4ee5\u6ce8\u518c\u9a8c\u8bc1\u65b9\u6cd5\u3002 #encoding=utf-8 from marshmallow import Schema , fields , ValidationError , validates class UserSchema ( Schema ): name = fields . String ( required = True ) email = fields . Email () created_time = fields . DateTime () @validates ( \"name\" ) def validate_name ( self , value ): if len ( value ) <= 2 : raise ValidationError ( \"name\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e2\u4f4d\" ) if len ( value ) >= 6 : raise ValidationError ( \"name\u957f\u5ea6\u4e0d\u80fd\u5927\u4e8e6\u4f4d\" ) user_data = { \"name\" : \"InvalidName\" , \"email\" : \"2432783449@qq.com\" } try : res = UserSchema () . load ( user_data ) except ValidationError as e : print ( e . messages ) 6.3 Required Fields(\u5fc5\u586b\u9009\u9879) \u00b6 \u4e0a\u9762\u5df2\u7ecf\u7b80\u5355\u4f7f\u7528\u8fc7required\u53c2\u6570\u4e86\u3002\u8fd9\u91cc\u518d\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u3002 \u81ea\u5b9a\u4e49required\u5f02\u5e38\u4fe1\u606f\uff1a \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5728requird=True\u65f6\u7f3a\u5931\u5b57\u6bb5\u65f6\u629b\u51fa\u7684\u5f02\u5e38\u4fe1\u606f\uff1a\u8bbe\u7f6e\u53c2\u6570error_messages\u7684\u503c #encoding=utf-8 from marshmallow import Schema , fields , ValidationError , validates class UserSchema ( Schema ): name = fields . String ( required = True , error_messages = { \"required\" : \"name\u5b57\u6bb5\u5fc5\u987b\u7684\" }) email = fields . Email () created_time = fields . DateTime () @validates ( \"name\" ) def validate_name ( self , value ): if len ( value ) <= 2 : raise ValidationError ( \"name\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e2\u4f4d\" ) if len ( value ) >= 6 : raise ValidationError ( \"name\u957f\u5ea6\u4e0d\u80fd\u5927\u4e8e6\u4f4d\" ) user_data = { \"email\" : \"2432783449@qq.com\" } try : res = UserSchema () . load ( user_data ) except ValidationError as e : print ( e . messages ) Partial Loading\u5ffd\u7565\u9a8c\u8bc1\uff1a \u4f7f\u7528required\u4e4b\u540e\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u5728\u4f20\u5165\u6570\u636e\u7684\u65f6\u5019\u5ffd\u7565\u8fd9\u4e2a\u5fc5\u586b\u5b57\u6bb5\u3002 # encoding = utf - 8 from marshmallow import Schema , fields , ValidationError , validates class UserSchema ( Schema ): name = fields . String ( required = True ) age = fields . Integer ( required = True ) # \u65b9\u6cd5\u4e00 \uff1a \u5728load () \u65b9\u6cd5\u8bbe\u7f6epartial\u53c2\u6570\u7684\u503c ( \u5143\u7ec4 ) \uff0c \u8868\u65f6\u5ffd\u7565\u90a3\u4e9b\u5b57\u6bb5 \u3002 schema = UserSchema () res = schema . load ({ \"age\" : 42 }, partial = ( \"name\" ,)) print ( res ) # { ' age ' : 42 } # \u65b9\u6cd5\u4e8c \uff1a \u76f4\u63a5\u8bbe\u7f6epartial = True schema = UserSchema () res = schema . load ({ \"age\" : 42 }, partial = True ) print ( res ) # { ' age ' : 42 } \u770b\u8d77\u6765\u4e24\u79cd\u65b9\u6cd5\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u65b9\u6cd5\u4e00\u548c\u65b9\u6cd5\u4e8c\u6709\u533a\u522b\uff1a\u65b9\u6cd5\u4e00\u53ea\u5ffd\u7565\u4f20\u5165partial\u7684\u5b57\u6bb5\uff0c\u65b9\u6cd5\u4e8c\u4f1a\u5ffd\u7565\u9664\u524d\u9762\u4f20\u5165\u7684\u6570\u636e\u91cc\u5df2\u6709\u7684\u5b57\u6bb5\u4e4b\u5916\u7684\u6240\u6709\u5b57\u6bb5 6.4 \u6307\u5b9a\u9ed8\u8ba4\u503c \u00b6 load_default \u6307\u5b9a\u9ed8\u8ba4\u7684\u53cd\u5e8f\u5217\u5316\u503c dump_default \u6307\u5b9a\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u503c class UserSchema ( Schema ): id = fields . UUID ( load_default = uuid . uuid1 ) birthdate = fields . DateTime ( dump_default = dt . datetime ( 2017 , 9 , 29 )) UserSchema () . load ({}) # {'id': UUID('337d946c-32cd-11e8-b475-0022192ed31b')} UserSchema () . dump ({}) # {'birthdate': '2017-09-29T00:00:00+00:00'} 6.5 \u5bf9\u672a\u77e5\u5b57\u6bb5\u7684\u5904\u7406 \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f20\u5165\u4e86\u672a\u77e5\u7684\u5b57\u6bb5(Schema\u91cc\u6ca1\u6709\u7684\u5b57\u6bb5)\uff0c\u6267\u884cload()\u65b9\u6cd5\u4f1a\u629b\u51fa\u4e00\u4e2a ValidationError \u5f02\u5e38\u3002\u8fd9\u79cd\u884c\u4e3a\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539 unknown \u9009\u9879\u6765\u4fee\u6539\u3002 unknown \u6709\u4e09\u4e2a\u503c\uff1a EXCLUDE: exclude unknown fields(\u76f4\u63a5\u6254\u6389\u672a\u77e5\u5b57\u6bb5) INCLUDE: accept and include the unknown fields(\u63a5\u53d7\u672a\u77e5\u5b57\u6bb5) RAISE: raise a ValidationError if there are any unknown fields(\u629b\u51fa\u5f02\u5e38) \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u9ed8\u8ba4\u7684\u884c\u4e3a\u5c31\u662fRAISE\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u53bb\u66f4\u6539\uff1a \u65b9\u6cd5\u4e00\uff1a\u5728\u7f16\u5199Schema\u7c7b\u7684\u65f6\u5019\u5728class Meta\u91cc\u4fee\u6539 from marshmallow import EXCLUDE , Schema , fields class UserSchema ( Schema ): name = fields . String ( required = True , error_messages = { \"required\" : \"name\u5b57\u6bb5\u5fc5\u987b\u586b\u5199\" }) email = fields . Email () created_time = fields . DateTime () class Meta : unknown = EXCLUDE \u65b9\u6cd5\u4e8c\uff1a\u5728\u5b9e\u4f8b\u5316Schema\u7c7b\u7684\u65f6\u5019\u8bbe\u7f6e\u53c2\u6570unknown\u7684\u503c class UserSchema ( Schema ): name = fields . Str ( required = True , error_messages = { \"required\" : \"name\u5b57\u6bb5\u5fc5\u987b\u586b\u5199\" }) email = fields . Email () created_time = fields . DateTime () shema = UserSchema ( unknown = EXCLUDE ) 7\u3001Schema.validate(\u6821\u9a8c\u6570\u636e) \u00b6 \u5982\u679c\u53ea\u662f\u60f3\u7528Schema\u53bb\u9a8c\u8bc1\u6570\u636e, \u800c\u4e0d\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\u751f\u6210\u5bf9\u8c61, \u53ef\u4ee5\u4f7f\u7528Schema.validate() \u53ef\u4ee5\u770b\u5230, \u901a\u8fc7schema.validate()\u4f1a\u81ea\u52a8\u5bf9\u6570\u636e\u8fdb\u884c\u6821\u9a8c, \u5982\u679c\u6709\u9519\u8bef, \u5219\u4f1a\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u7684dict,\u6ca1\u6709\u9519\u8bef\u5219\u8fd4\u56de\u7a7a\u7684dict\uff0c\u901a\u8fc7\u8fd4\u56de\u7684\u6570\u636e, \u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u8ba4\u9a8c\u8bc1\u662f\u5426\u901a\u8fc7. #encoding=utf-8 from marshmallow import Schema , fields , ValidationError class UserSchema ( Schema ): name = fields . Str ( required = True , error_messages = { \"required\" : \"name\u5b57\u6bb5\u5fc5\u987b\u586b\u5199\" }) email = fields . Email () created_time = fields . DateTime () user = { \"name\" : \"lhh\" , \"email\" : \"2432783449\" } schema = UserSchema () res = schema . validate ( user ) print ( res ) # {'email': ['Not a valid email address.']} user = { \"name\" : \"lhh\" , \"email\" : \"2432783449@qq.com\" } schema = UserSchema () res = schema . validate ( user ) print ( res ) # {} 8. Specifying Serialization/Deserialization Keys(\u6307\u5b9a\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u952e) \u00b6 8.1 Specifying Attribute Names(\u5e8f\u5217\u5316\u65f6\u6307\u5b9aobject\u5c5e\u6027\u5bf9\u5e94fields\u5b57\u6bb5) \u00b6 Schema\u9ed8\u8ba4\u4f1a\u5e8f\u5217\u5316\u4f20\u5165\u5bf9\u8c61\u548c\u81ea\u8eab\u5b9a\u4e49\u7684fields\u76f8\u540c\u7684\u5c5e\u6027, \u7136\u800c\u4f60\u4e5f\u4f1a\u6709\u9700\u6c42\u4f7f\u7528\u4e0d\u540c\u7684fields\u548c\u5c5e\u6027\u540d. \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u4f60\u9700\u8981\u660e\u786e\u5b9a\u4e49\u8fd9\u4e2afields\u5c06\u4ece\u4ec0\u4e48\u5c5e\u6027\u540d\u53d6\u503c from marshmallow import fields , Schema , ValidationError import datetime as dt class User : def __init__ ( self , name , email ): self . name = name self . email = email self . created_time = dt . datetime . now () class UserSchema ( Schema ): full_name = fields . String ( attribute = \"name\" ) email_address = fields . Email ( attribute = \"email\" ) created_at = fields . DateTime ( attribute = \"created_time\" ) user = User ( \"lhh\" , email = \"2432783449@qq.com\" ) schema = UserSchema () res = schema . dump ( user ) print ( res ) # {'email_address': '2432783449@qq.com', 'full_name': 'lhh', 'created_at': '2021-05-29T09:24:38.186191'} \u5982\u4e0a\u6240\u793a\uff1aUserSchema\u4e2d\u7684full_name\uff0cemail_address\uff0ccreated_at\u5206\u522b\u4eceUser\u5bf9\u8c61\u7684name\uff0cemail\uff0ccreated_time\u5c5e\u6027\u53d6\u503c\u3002 8.2 \u53cd\u5e8f\u5217\u5316\u65f6\u6307\u5b9afields\u5b57\u6bb5\u5bf9\u5e94object\u5c5e\u6027 \u00b6 \u8fd9\u4e2a\u4e0e\u4e0a\u9762\u76f8\u53cd\uff0cSchema\u9ed8\u8ba4\u53cd\u5e8f\u5217\u5316\u4f20\u5165\u5b57\u5178\u548c\u8f93\u51fa\u5b57\u5178\u4e2d\u76f8\u540c\u7684\u5b57\u6bb5\u540d. \u5982\u679c\u4f60\u89c9\u5f97\u6570\u636e\u4e0d\u5339\u914d\u4f60\u7684schema, \u53ef\u4ee5\u4f20\u5165load_from\u53c2\u6570\u6307\u5b9a\u9700\u8981\u589e\u52a0load\u7684\u5b57\u6bb5\u540d(\u539f\u5b57\u6bb5\u540d\u4e5f\u80fdload, \u4e14\u4f18\u5148load\u539f\u5b57\u6bb5\u540d) from marshmallow import fields , Schema , ValidationError import datetime as dt class UserSchema ( Schema ): full_name = fields . String ( load_from = \"name\" ) email_address = fields . Email ( load_from = \"email\" ) created_at = fields . DateTime ( load_from = \"created_time\" ) user = { \"full_name\" : \"lhh\" , \"email_address\" : \"2432783449@qq.com\" } schema = UserSchema () res = schema . load ( user ) print ( res ) # {'full_name': 'lhh', 'email_address': '2432783449@qq.com'} 8.3 \u8ba9key\u540c\u65f6\u6ee1\u8db3\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u7684\u65b9\u6cd5 \u00b6 #encoding=utf-8 from marshmallow import fields , ValidationError , Schema class UserSchema ( Schema ): full_name = fields . String ( data_key = \"name\" ) email_address = fields . Email ( data_key = \"email\" ) created_at = fields . DateTime ( data_key = \"created_time\" ) # \u5e8f\u5217\u5316 user = { \"full_name\" : \"lhh\" , \"email_address\" : \"2432783449@qq.com\" } schema = UserSchema () res = schema . dump ( user ) print ( res ) # {'name': 'lhh', 'email': '2432783449@qq.com'} # \u53cd\u5e8f\u5217\u5316 user = { 'name' : 'lhh' , 'email' : '2432783449@qq.com' } schema = UserSchema () res = schema . load ( user ) print ( res ) # {'full_name': 'lhh', 'email_address': '2432783449@qq.com'} 9. \u91cd\u6784\uff1a\u521b\u5efa\u9690\u5f0f\u5b57\u6bb5 \u00b6 \u5f53Schema\u5177\u6709\u8bb8\u591a\u5c5e\u6027\u65f6\uff0c\u4e3a\u6bcf\u4e2a\u5c5e\u6027\u6307\u5b9a\u5b57\u6bb5\u7c7b\u578b\u53ef\u80fd\u4f1a\u91cd\u590d\uff0c\u7279\u522b\u662f\u5f53\u8bb8\u591a\u5c5e\u6027\u5df2\u7ecf\u662f\u672c\u5730python\u7684\u6570\u636e\u7c7b\u578b\u65f6\u3002class Meta\u5141\u8bb8\u6307\u5b9a\u8981\u5e8f\u5217\u5316\u7684\u5c5e\u6027\uff0cmarshmallow\u5c06\u6839\u636e\u5c5e\u6027\u7684\u7c7b\u578b\u9009\u62e9\u9002\u5f53\u7684\u5b57\u6bb5\u7c7b\u578b\u3002 # \u91cd\u6784Schema class UserSchema ( Schema ): uppername = fields . Function ( lambda obj : obj . name . upper ()) class Meta : fields = ( \"name\" , \"email\" , \"created_at\" , \"uppername\" ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c name\u5c06\u81ea\u52a8\u88ab\u683c\u5f0f\u5316\u4e3aString\u7c7b\u578b\uff0ccreated_at\u5c06\u88ab\u683c\u5f0f\u5316\u4e3aDateTime\u7c7b\u578b\u3002 \u5982\u679c\u60a8\u5e0c\u671b\u6307\u5b9a\u9664\u4e86\u663e\u5f0f\u58f0\u660e\u7684\u5b57\u6bb5\u4e4b\u5916\u8fd8\u5305\u62ec\u54ea\u4e9b\u5b57\u6bb5\u540d\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u9644\u52a0\u9009\u9879\u3002\u5982\u4e0b\uff1a class UserSchema ( Schema ): uppername = fields . Function ( lambda obj : obj . name . upper ()) class Meta : # No need to include 'uppername' additional = ( \"name\" , \"email\" , \"created_at\" ) 10. \u6392\u5e8f \u00b6 \u5bf9\u4e8e\u67d0\u4e9b\u7528\u4f8b\uff0c\u7ef4\u62a4\u5e8f\u5217\u5316\u8f93\u51fa\u7684\u5b57\u6bb5\u987a\u5e8f\u53ef\u80fd\u5f88\u6709\u7528\u3002\u8981\u542f\u7528\u6392\u5e8f\uff0c\u8bf7\u5c06ordered\u9009\u9879\u8bbe\u7f6e\u4e3atrue\u3002\u8fd9\u5c06\u6307\u793amarshmallow\u5c06\u6570\u636e\u5e8f\u5217\u5316\u5230 collections.OrderedDict from collections import OrderedDict import datetime as dt from marshmallow import fields , ValidationError , Schema class User : def __init__ ( self , name , email ): self . name = name self . email = email self . created_time = dt . datetime . now () class UserSchema ( Schema ): uppername = fields . Function ( lambda obj : obj . name . upper ()) class Meta : fields = ( \"name\" , \"email\" , \"created_time\" , \"uppername\" ) ordered = True user = User ( \"lhh\" , \"2432783449@qq.com\" ) schema = UserSchema () res = schema . dump ( user ) print ( isinstance ( res , OrderedDict )) # \u5224\u65ad\u53d8\u91cf\u7c7b\u578b # True print ( res ) # OrderedDict([('name', 'lhh'), ('email', '2432783449@qq.com'), ('created_time', '2021-05-29T09:40:46.351382'), ('uppername', 'LHH')]) 11. \u201c\u53ea\u8bfb\u201d\u4e0e\u201c\u53ea\u5199\u201d\u5b57\u6bb5 \u00b6 \u5728Web API\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5e8f\u5217\u5316\u53c2\u6570dump_only\u548c\u53cd\u5e8f\u5217\u5316\u53c2\u6570load_only\u5728\u6982\u5ff5\u4e0a\u5206\u522b\u7b49\u540c\u4e8e\u53ea\u8bfb\u548c\u53ea\u5199\u5b57\u6bb5\u3002 from marshmallow import Schema , fields class UserSchema ( Schema ): name = fields . Str () password = fields . Str ( load_only = True ) # \u7b49\u4e8e\u53ea\u5199 created_at = fields . DateTime ( dump_only = True ) # \u7b49\u4e8e\u53ea\u8bfb load\u65f6\uff0cdump_only\u5b57\u6bb5\u88ab\u89c6\u4e3a\u672a\u77e5\u5b57\u6bb5\u3002\u5982\u679cunknown\u9009\u9879\u8bbe\u7f6e\u4e3ainclude\uff0c\u5219\u4e0e\u8fd9\u4e9b\u5b57\u6bb5\u5bf9\u5e94\u7684\u952e\u7684\u503c\u5c06\u56e0\u6b64loaded\u800c\u4e0d\u8fdb\u884c\u9a8c\u8bc1\u3002 12. \u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u65f6\u6307\u5b9a\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c \u00b6 \u5e8f\u5217\u5316\u65f6\u8f93\u5165\u503c\u7f3a\u5931\u7528default\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002\u53cd\u5e8f\u5217\u5316\u65f6\u8f93\u5165\u503c\u7f3a\u5931\u7528missing\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002 #encoding=utf-8 import uuid import datetime as dt from marshmallow import fields , ValidationError , Schema class UserSchema ( Schema ): id = fields . UUID ( missing = uuid . uuid1 ) birthday = fields . DateTime ( default = dt . datetime ( 1996 , 11 , 17 )) # \u5e8f\u5217\u5316 res = UserSchema () . dump ({}) print ( res ) # {'birthday': '1996-11-17T00:00:00'} # \u53cd\u5e8f\u5217\u5316 res = UserSchema () . load ({ 'birthday' : '1996-11-17T00:00:00' }) print ( res ) # {'id': UUID('751d95db-c020-11eb-83eb-001a7dda7115'), 'birthday': datetime.datetime(1996, 11, 17, 0, 0)} 13. \u540e\u7eed\u6269\u5c55 \u00b6 from marshmallow import Schema , fields class String128 ( fields . String ): \"\"\" \u957f\u5ea6\u4e3a128\u7684\u5b57\u7b26\u4e32\u7c7b\u578b \"\"\" default_error_messages = { \"type\" : \"\u8be5\u5b57\u6bb5\u53ea\u80fd\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\" , \"invalid\" : \"\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e6\" , } def _deserialize ( self , value , attr , data , ** kwargs ): if not isinstance ( value , str ): self . fail ( \"type\" ) if len ( value ) < 6 : self . fail ( \"invalid\" ) class AppSchema ( Schema ): name = String128 ( required = True ) priority = fields . Integer () obj_type = String128 () link = String128 () deploy = fields . Dict () description = fields . String () projects = fields . List ( cls_or_instance = fields . Dict ) app = { \"name\" : \"app11\" , \"priority\" : 2 , \"obj_type\" : \"web\" , \"link\" : \"123.123.00.2\" , \"deploy\" : { \"deploy1\" : \"deploy1\" , \"deploy2\" : \"deploy2\" }, \"description\" : \"app111 test111\" , \"projects\" : [{ \"id\" : 2 }] } schema = AppSchema () res = schema . validate ( app ) print ( res ) # {'obj_type': ['\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e6'], 'name': ['\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e6']} marshmallow: simplified object serialization \u2014 marshmallow 3.15.0 documentation webargs \u00b6 webargs \u662f\u7528\u6765\u53c2\u6570\u89e3\u6790\u548c\u6821\u9a8c\u53c2\u6570\u7684\u5de5\u5177\u3002 \u4f7f\u7528\u793a\u4f8b \u00b6 from flask import Flask from webargs import fields from webargs.flaskparser import use_args app = Flask ( __name__ ) @app . route ( \"/\" ) @use_args ({ \"name\" : fields . Str ( required = True )}, location = \"query\" ) def index ( args ): return \"Hello \" + args [ \"name\" ] if __name__ == \"__main__\" : app . run () # curl http://localhost:5000/\\?name\\='World' # Hello World \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c webargs \u4f1a\u81ea\u52a8\u89e3\u6790 json body \u6570\u636e\u3002\u4f46\u662f\u4e5f\u652f\u6301\u5176\u4ed6\u7c7b\u578b\u3002\u9700\u8981\u624b\u52a8\u6307\u5b9a\u6570\u636e\u6765\u6e90\uff0c\u8bbe\u7f6e\u65b9\u5f0f\u4e3a location=xxx (\"form\", \"query\",\"json\",\"headers\", \"cookies\", \"files\", \"paths\") \u66f4\u591a\u4f7f\u7528\u65b9\u5f0f\u53ca\u529f\u80fd\u652f\u6301\u53ef\u53c2\u89c1\u5b98\u65b9\u6587\u6863\uff1a webargs 8.1.0 documentation flask-apispec \u00b6 flask-apispec \u662f\u4e00\u6b3e\u8f7b\u91cf\u7ea7\u80fd\u81ea\u52a8\u751f\u6210 REST APIs \u7684 Flask \u5de5\u5177\u3002\u4f7f\u7528\u4e86 webargs \u505a request \u89e3\u6790\uff0c marshmallow \u505a response \u683c\u5f0f\u5316\uff0c\u548c apispec \u81ea\u52a8\u751f\u6210 Swagger \u3002 \u4e0b\u8f7d\u5b89\u88c5 \u00b6 pip install flask - apispec \u4f7f\u7528\u5b9e\u4f8b \u00b6 from flask import Flask from flask_apispec import use_kwargs , marshal_with from marshmallow import Schema from webargs import fields from .models import Pet app = Flask ( __name__ ) class PetSchema ( Schema ): class Meta : fields = ( 'name' , 'category' , 'size' ) @app . route ( '/pets' ) @use_kwargs ({ 'category' : fields . Str (), 'size' : fields . Str ()}) @marshal_with ( PetSchema ( many = True )) def get_pets ( ** kwargs ): return Pet . query . filter_by ( ** kwargs ) \u9879\u76ee\u4e2d\u4f7f\u7528\u5b9e\u4f8b \u00b6 # apps/__init__.py def register_apispec ( app ): from apispec import APISpec from apispec.ext.marshmallow import MarshmallowPlugin from util.flask_apispec import FlaskPlugin , FlaskApiSpec from webargs.flaskparser import FlaskParser from marshmallow import EXCLUDE # \u8bbe\u7f6ejson\u53c2\u6570\u6821\u9a8c\u65f6\u672a\u77e5\u53c2\u6570\u5904\u7406\u65b9\u5f0f\u4e3a\u4e22\u5f03\u672a\u77e5\u5b57\u6bb5 class Parser ( FlaskParser ): DEFAULT_UNKNOWN_BY_LOCATION = { \"json\" : EXCLUDE } app . config . update ({ 'APISPEC_SPEC' : APISpec ( title = \"POROS\" , version = \"1.0.0\" , openapi_version = \"2.0\" , info = dict ( description = \"POROS API\" ), plugins = [ FlaskPlugin (), MarshmallowPlugin ()], ), 'APISPEC_FORMAT_RESPONSE' : None , 'APISPEC_WEBARGS_PARSER' : Parser (), # \u542f\u7528\u6307\u5b9a\u89e3\u6790\u5668 }) docs = FlaskApiSpec ( app , document_options = False ) docs . register_existing_resources () \u5b98\u65b9\u6587\u6863: flask-apispec: Auto-documenting REST APIs for Flask \u2014 flask-apispec 0.7.0 documentation \u6e90\u7801\uff1a jmcarp/flask-apispec (github.com) mongoengine \u00b6 MongoEngine \u662f\u4e00\u4e2a\u57fa\u4e8e pymongo \u5f00\u53d1\u7684 ODM \u5e93\uff0c\u5bf9\u5e94\u4e0e SQLAlchemy \u3002\u540c\u65f6\uff0c\u5728 MongoEngine \u57fa\u7840\u4e0a\u5c01\u88c5\u4e86 Flask-MongoEngine \uff0c\u7528\u4e8e\u652f\u6301 flask \u6846\u67b6\u3002 1 \u8fde\u63a5\u6570\u636e\u5e93 \u00b6 1.1 \u591a\u79cd\u8fde\u63a5\u65b9\u5f0f \u00b6 from mongoengine import connect # \u65b9\u6cd5\u4e00\uff1a\u672c\u5730\u8fde\u63a5 connect ( 'dbname' , alias = '\u522b\u540d' ) # \u65b9\u6cd5\u4e8c\uff1a\u8fdc\u7a0b\u8fde\u63a5 connect ( 'dbname' , host = '\u8fdc\u7a0b\u8fde\u63a5\u5730\u5740' , post = \u7aef\u53e3\u53f7 ) # \u65b9\u6cd5\u4e09\uff1a\u8fde\u63a5\u5e26\u6709\u9a8c\u8bc1\u7684\u8fdc\u7a0b\u6570\u636e\u5e93 connect ( 'dbname' , username = '\u7528\u6237\u540d' , password = '\u5bc6\u7801' , authentication_source = 'admin' , host = '\u8fdc\u7a0b\u670d\u52a1\u5668IP\u5730\u5740' , post = \u5f00\u653e\u7684\u7aef\u53e3\u53f7 )) 1.2 \u8fde\u63a5\u591a\u4e2a\u6570\u636e\u5e93 \u00b6 \u8981\u4f7f\u7528\u591a\u4e2a\u6570\u636e\u5e93\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528connect()\u5e76\u4e3a\u8fde\u63a5\u63d0\u4f9b\u522b\u540d(alisa)\uff0c\u9ed8\u8ba4\u4f7f\u7528\u201cdefault\u201d\u3002 \u5728\u540e\u53f0\uff0c\u8fd9\u7528\u4e8eregister_connection()\u5b58\u50a8\u6570\u636e\uff0c\u5982\u679c\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u9884\u5148\u6ce8\u518c\u6240\u6709\u522b\u540d\u3002 \u5728\u4e0d\u540c\u6570\u636e\u5e93\u4e2d\u5b9a\u4e49\u6587\u6863 \u901a\u8fc7\u5728\u5143\u6570\u636e\u4e2d\u63d0\u4f9bdb_alias\uff0c\u53ef\u4ee5\u5c06\u5404\u4e2a\u6587\u6863\u9644\u52a0\u5230\u4e0d\u540c\u7684\u6570\u636e\u5e93 \u3002\u8fd9\u5141\u8bb8DBRef \u5bf9\u8c61\u6307\u5411\u6570\u636e\u5e93\u548c\u96c6\u5408\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u6a21\u5f0f\uff0c\u4f7f\u75283\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u5e93\u6765\u5b58\u50a8\u6570\u636e # \u9ed8\u8ba4\u672c\u5730\u8fde\u63a5 connect ( alias = 'user-db-alias' \uff0c db = 'user-db' ) connect ( alias = 'book-db-alias' \uff0c db = 'book-db' ) connect ( alias = 'users-books-db -alias' \uff0c db = 'users-books-db' ) class User ( Document ) \uff1a name = StringField () meta = { 'db_alias' \uff1a 'user-db-alias' } # \u6307\u5b9a\u6570\u636e\u5bf9\u5e94\u7684\u6570\u636e\u5e93 class Book ( Document ) \uff1a name = StringField () meta = { 'db_alias' \uff1a 'book-db-alias' } class AuthorBooks ( Document ) \uff1a author = ReferenceField ( User ) book = ReferenceField ( Book ) meta = { 'db_alias' \uff1a ' users-books-db-alias' } \u65ad\u5f00\u73b0\u6709\u8fde\u63a5 disconnect \u53ef\u7528\u4e8e\u65ad\u5f00\u7279\u5b9a\u8fde\u63a5\u3002 from mongoengine import connect , disconnect connect ( 'a_db' , alias = 'db1' ) # ==\u300b \u5efa\u7acb\u522b\u540d\u4e3a\u201cdb1\u201d\u7684\u8fde\u63a5 class User ( Document ): name = StringField () meta = { 'db_alias' : 'db1' } disconnect ( alias = 'db1' ) # ==\u300b \u65ad\u5f00 \u522b\u540d\u4e3a\u201cdb1\u201d\u7684\u8fde\u63a5 connect ( 'another_db' , alias = 'db1' ) # ==\u300b \u7531\u4e8e\u4e0a\u4e00\u6b65\u65ad\u5f00\u4e86\u522b\u540d\u4e3adb1\u7684\u8fde\u63a5\uff0c\u73b0\u5728\u8fde\u63a5\u5176\u5b83\u6570\u636e\u5e93\u65f6\u53c8\u53ef\u4ee5\u4f7f\u7528\u522b\u540d\u201cdb1\u201d\u4f5c\u4e3a\u8fde\u63a5\u540d 1.3 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u00b6 \u6709\u65f6\u60a8\u53ef\u80fd\u5e0c\u671b\u5207\u6362\u6570\u636e\u5e93\u6216\u96c6\u5408\u4ee5\u8fdb\u884c\u67e5\u8be2 \u5207\u6362\u6570\u636e\u5e93 switch_db \u4e0a\u5141\u8bb8\u66f4\u6539\u6570\u636e\u5e93\u522b\u540d\u7ed9\u5b9a\u7c7b\uff0c\u5141\u8bb8\u5feb\u901f\u548c\u65b9\u4fbf\u5730\u8de8\u6570\u636e\u5e93\u8bbf\u95ee\uff1a \u5207\u6362\u6570\u636e\u5e93\uff0c\u5fc5\u987b\u9884\u5148\u6ce8\u518c\u522b\u540d(\u4f7f\u7528\u5df2\u6ce8\u518c\u7684\u522b\u540d) from mongoengine.context_managers import switch_db class User ( Document ): name = StringField () meta = { 'db_alias' : 'user-db' } with switch_db ( User , 'archive-user-db' ) as User : User ( name = 'Ross' ) . save () # ===\u300b \u8fd9\u65f6\u4f1a\u5c06\u6570\u636e\u4fdd\u5b58\u81f3 'archive-user-db' \u5207\u6362\u6587\u6863 switch_collection() \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5141\u8bb8\u66f4\u6539\u96c6\u5408\uff0c\u5141\u8bb8\u5feb\u901f\u548c\u65b9\u4fbf\u5730\u8de8\u96c6\u5408\u8bbf\u95ee\uff1a from mongoengine.context_managers import switch_collection class Group ( Document ): name = StringField () Group ( name = 'test' ) . save () # \u4fdd\u5b58\u81f3\u9ed8\u8ba4\u6570\u636e\u5e93 with switch_collection ( Group , 'group2000' ) as Group : Group ( name = 'hello Group 2000 collection!' ) . save () # \u5c06\u6570\u636e\u4fdd\u5b58\u81f3 group2000 \u96c6\u5408 2 \u5b9a\u4e49\u6587\u6863 \u00b6 2.1 \u5b9a\u4e49\u6587\u6863\u6a21\u578b(document) \u00b6 MongoEngine \u5141\u8bb8\u4e3a\u6587\u6863\u5b9a\u4e49\u6a21\u5f0f\uff0c\u56e0\u4e3a\u8fd9\u6709\u52a9\u4e8e\u51cf\u5c11\u7f16\u7801\u9519\u8bef\uff0c\u5e76\u5141\u8bb8\u5728\u53ef\u80fd\u5b58\u5728\u7684\u5b57\u6bb5\u4e0a\u5b9a\u4e49\u65b9\u6cd5\u3002 \u4e3a\u6587\u6863\u5b9a\u4e49\u6a21\u5f0f\uff0c\u9700\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea Document \u7684\u7c7b\uff0c\u5c06\u5b57\u6bb5\u5bf9\u8c61\u4f5c\u4e3a\u7c7b\u5c5e\u6027\u6dfb\u52a0\u5230\u6587\u6863\u7c7b\uff1a from mongoengine import * import datetime class Page ( Document ): title = StringField ( max_length = 200 , required = True ) # ===\u300b \u521b\u5efa\u4e00\u4e2aString\u578b\u7684\u5b57\u6bb5title\uff0c\u6700\u5927\u957f\u5ea6\u4e3a200\u5b57\u8282\u4e14\u4e3a\u5fc5\u586b\u9879 date_modified = DateTimeField ( default = datetime . datetime . utcnow ) # ===\u300b \u521b\u5efa\u4e00\u4e2a\u65f6\u95f4\u7c7b\u578b\u7684\u5b57\u6bb5(utcnow\u662f\u4e16\u754c\u65f6\u95f4\uff0cnow\u662f\u672c\u5730\u8ba1\u7b97\u673a\u65f6\u95f4) 2.2 \u5b9a\u4e49\u52a8\u6001\u6587\u6863\u6a21\u578b(Dynamic Document) \u00b6 \u52a8\u6001\u6587\u6863(Dynamic Document)\u8ddf\u975e\u52a8\u6001\u6587\u6863(document)\u7684\u533a\u522b\u662f\uff0c\u52a8\u6001\u6587\u6863\u53ef\u4ee5\u5728\u6a21\u578b\u57fa\u7840\u4e0a\u65b0\u589e\u5b57\u6bb5\uff0c\u4f46\u975e\u52a8\u6001\u6587\u6863\u4e0d\u5141\u8bb8\u65b0\u589e\u3002 \u52a8\u6001\u6587\u6863\u4e2d\u81ea\u5b9a\u4e49\u5b57\u6bb5\u4e0d\u80fd\u4ee5 _ \u5f00\u5934 from mongoengine import * class Page ( DynamicDocument ): title = StringField ( max_length = 200 , required = True ) # \u521b\u5efa\u4e00\u4e2apage\u5b9e\u4f8b\uff0c\u5e76\u65b0\u589etags\u5b57\u6bb5 >>> page = Page ( title = 'Using MongoEngine' ) >>> page . tags = [ 'mongodb' , 'mongoengine' ] >>> page . save () ===== \u300b # \u4e0d\u4f1a\u62a5\u9519\uff0c\u53ef\u4ee5\u88ab\u4fdd\u5b58\u81f3\u6570\u636e\u5e93 >>> Page . objects ( tags = 'mongoengine' ) . count () ===== \u300b # \u7edf\u8ba1 tags=\u2018mongengine\u2019\u7684\u6587\u6863\u6570 >>> 1 2.3 \u5b57\u6bb5Fields \u00b6 \u5b57\u6bb5\u7c7b\u578b\u5305\u542b\uff1a \u4ee5 \u300b \u5f00\u5934\u7684\u4e3a\u5e38\u7528\u7c7b\u578b \u300b BinaryField # \u4e8c\u8fdb\u5236\u5b57\u6bb5 \u300b BooleanField # \u5e03\u5c14\u578b\u5b57\u6bb5 \u300b DateTimeField # \u540e\u516d\u4f4d\u7cbe\u786e\u5230\u6beb\u5999\u7684\u65f6\u95f4\u7c7b\u578b\u5b57\u6bb5 ComplexDateTimeField # \u540e\u516d\u4f4d\u7cbe\u786e\u5230\u5fae\u5999\u7684\u65f6\u95f4\u7c7b\u578b\u5b57\u6bb5 DecimalField # \u300b DictField # \u5b57\u5178\u7c7b\u578b\u5b57\u6bb5 \u300b DynamicField # \u52a8\u6001\u7c7b\u578b\u5b57\u6bb5\uff0c\u80fd\u591f\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e \u300b EmailField # \u90ae\u4ef6\u7c7b\u578b\u5b57\u6bb5 \u300b EmbeddedDocumentField # \u5d4c\u5165\u5f0f\u6587\u6863\u7c7b\u578b \u300b StringField # \u5b57\u7b26\u4e32\u7c7b\u578b\u5b57\u6bb5 \u300b URLField # URL\u7c7b\u578b\u5b57\u6bb5 \u300b SequenceField # \u987a\u5e8f\u8ba1\u6570\u5668\u5b57\u6bb5\uff0c\u81ea\u589e\u957f \u300b ListField # \u5217\u8868\u7c7b\u578b\u5b57\u6bb5 \u300b ReferenceField # \u5f15\u7528\u7c7b\u578b\u5b57\u6bb5 LazyReferenceField \u300b IntField # \u6574\u6570\u7c7b\u578b\u5b57\u6bb5\uff0c\u5b58\u50a8\u5927\u5c0f\u4e3a32\u5b57\u8282 LongField # \u957f\u6574\u578b\u5b57\u6bb5\uff0c\u5b58\u50a8\u5927\u5c0f\u4e3a64\u5b57\u8282 EmbeddedDocumentListField FileField # \u5217\u8868\u7c7b\u578b\u5b57\u6bb5 FloatField # \u6d6e\u70b9\u6570\u7c7b\u578b\u5b57\u6bb5 GenericEmbeddedDocumentField GenericReferenceField GenericLazyReferenceField GeoPointField ImageField MapField ObjectIdField SortedListField UUIDField PointField LineStringField PolygonField MultiPointField MultiLineStringField MultiPolygonField \u5b57\u6bb5\u901a\u7528\u53c2\u6570 db_field \uff1a MongoDB \u5b57\u6bb5\u540d\u79f0 required : \u662f\u5426\u5fc5\u586b default : \u9ed8\u8ba4\u503c unique : \u662f\u5426\u552f\u4e00 unique_with :\u552f\u4e00\u5b57\u6bb5\u5217\u8868 primary_key : \u4e3b\u952e choices \uff1a\u9650\u5236\u8be5\u5b57\u6bb5\u7684\u503c(\u4e3a\u5217\u8868\u3001\u96c6\u5408\u6216\u5143\u7ec4\u4e2d\u7684\u4e00\u4e2a) validation \uff1a\u53ef\u7528\u4e8e\u9a8c\u8bc1\u5b57\u6bb5\u7684\u503c, callable\u5c06\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u5982\u679c\u9a8c\u8bc1\u5931\u8d25\uff0c\u5219\u5e94\u5f15\u53d1ValidationError def _not_empty ( val ): if not val : raise ValidationError ( 'value can not be empty' ) class Person ( Document ): name = StringField ( validation = _not_empty ) \u5217\u8868\u5b57\u6bb5(ListField) \u4f7f\u7528ListField\u5b57\u6bb5\u7c7b\u578b\u53ef\u4ee5\u5411 Document\u6dfb\u52a0\u9879\u76ee\u5217\u8868\u3002ListField\u5c06\u53e6\u4e00\u4e2a\u5b57\u6bb5\u5bf9\u8c61\u4f5c\u4e3a\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u6307\u5b9a\u53ef\u4ee5\u5728\u5217\u8868\u4e2d\u5b58\u50a8\u54ea\u4e9b\u7c7b\u578b\u5143\u7d20\uff1a class Page ( Document ) \uff1a tags = ListField ( StringField ( max_length = 50 )) # ===\u300b ListField\u4e2d\u5b58\u653e\u5b57\u7b26\u4e32\u5b57\u6bb5 # \u5e94\u8be5\u53ef\u4ee5\u5b58\u653e\u4efb\u610f\u7c7b\u578b\u5b57\u6bb5 \u5185\u5d4c\u6587\u6863(Embedded Document) MongoDB\u80fd\u591f\u5c06\u6587\u6863\u5d4c\u5165\u5230\u5176\u4ed6\u6587\u6863\u4e2d\u3002\u8981\u521b\u5efa\u5d4c\u5165\u5f0f\u6587\u6863\u6a21\u578b\uff0c\u9700\u8981\u7ee7\u627fEmbeddedDocument\uff1a # \u521b\u5efa\u5d4c\u5165\u5f0f\u6587\u6863\u6a21\u578b class Comment ( EmbeddedDocument ): content = StringField () # \u521b\u5efa\u6587\u6863\u6a21\u578b\uff0c\u4e14\u5c06 Comment \u5d4c\u5165Post.comments\u5217\u8868\u5b57\u6bb5\u4e2d class Page ( Document ): comments = ListField ( EmbeddedDocumentField ( Comment )) comment1 = Comment ( content = 'Good work!' ) comment2 = Comment ( content = 'Nice article!' ) page = Page ( comments = [ comment1 , comment2 ]) \u5b57\u5178\u5b57\u6bb5(Dictionary Fields) \u4e00\u822c\u5efa\u8bae\u4f7f\u7528\u5d4c\u5957\u6587\u6863\uff0c\u8fd9\u6837\u53ef\u4ee5\u9a8c\u8bc1\u6570\u636e\u7b49\u7b49\u3002\u4f46\u662f\uff0c\u5f53\u4f60\u4e0d\u77e5\u9053\u60f3\u8981\u5b58\u50a8\u4ec0\u4e48\u7ed3\u6784\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b57\u5178\u5b57\u6bb5\uff08\u5b57\u5178\u5b57\u6bb5\u4e0d\u652f\u6301\u9a8c\u8bc1\uff09\uff0c\u5b57\u5178\u53ef\u4ee5\u5b58\u50a8\u590d\u6742\u6570\u636e\uff0c\u5176\u4ed6\u5b57\u5178\uff0c\u5217\u8868\uff0c\u5bf9\u5176\u4ed6\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u662f\u6700\u7075\u6d3b\u7684\u5b57\u6bb5\u7c7b\u578b\uff1a class SurveyResponse ( Document ): date = DateTimeField () user = ReferenceField ( User ) answers = DictField () survey_response = SurveyResponse ( date = datetime . utcnow (), user = request . user ) response_form = ResponseForm ( request . POST ) survey_response . answers = response_form . cleaned_data () survey_response . save () \u66f4\u8fc7\u5b57\u6bb5\u7c7b\u578b\u53c2\u89c1\uff1a 2.3. Defining documents \u2014 MongoEngine 0.24.1 documentation 2.4 \u7d22\u5f15 Indexes \u00b6 \u4e3a\u4e86\u80fd\u5728\u6570\u636e\u5e93\u4e2d\u66f4\u5feb\u67e5\u627e\u6570\u636e\uff0c\u9700\u8981\u521b\u5efa\u7d22\u5f15\u3002\u7d22\u5f15\u53ef\u4ee5\u5728\u6a21\u578b\u6587\u6863\u4e2d\u7684meta\u4e2d\u6307\u5b9a\u7d22\u5f15\u5b57\u6bb5\u4ee5\u53ca\u7d22\u5f15\u65b9\u5411\u3002 \u53ef\u4ee5\u901a\u8fc7\u5728\u5b57\u6bb5\u540d\u524d\u52a0\u4e0a$\u6765\u6307\u5b9a\u6587\u672c\u7d22\u5f15\u3002\u53ef\u4ee5\u901a\u8fc7\u5728\u5b57\u6bb5\u540d\u524d\u52a0\u4e0a\uff03\u6765\u6307\u5b9a\u6563\u5217\u7d22\u5f15 2.3. Defining documents \u2014 MongoEngine 0.24.1 documentation class Page ( Document ): category = IntField () title = StringField () rating = StringField () created = DateTimeField () meta = { 'indexes' : [ 'title' , '$title' , # ====\u300b \u6587\u672c\u7d22\u5f15 '#title' , # =====\u300b \u54c8\u5e0c\u7d22\u5f15 ( 'title' , '-rating' ), ( 'category' , '_cls' ), { 'fields' : [ 'created' ], 'expireAfterSeconds' : 3600 # ====\u300b \u8bbe\u7f6e\u6587\u6863\u57283600\u79d2\u540e\u8fc7\u671f\uff0c\u6570\u636e\u5e93\u4f1a\u57283600\u79d2\u540e\u5220\u9664\u8fc7\u671f\u6587\u6863 } ] } \u5168\u5c40\u7d22\u5f15\u9ed8\u8ba4\u9009\u9879 class Page ( Document ): title = StringField () rating = StringField () meta = { 'index_opts' : {}, 'index_background' : True , 'index_cls' : False , 'auto_create_index' : True , 'index_drop_dups' : True , } \u53c2\u6570\u8bf4\u660e\uff1a index_opts : \u8bbe\u7f6e\u9ed8\u8ba4\u7d22\u5f15\u9009\u9879 index_background : \u4e3a True \u65f6\uff0c\u540e\u53f0\u521b\u5efa\u7d22\u5f15 index_cls : \u4e00\u79cd\u5173\u95ed _cls \u7684\u7279\u5b9a\u7d22\u5f15\u7684\u65b9\u6cd5 auto_create_index : \u9ed8\u8ba4\u4e3a True \u3002 MongoEngine \u5c06\u786e\u4fdd\u6bcf\u6b21\u8fd0\u884c\u547d\u4ee4\u65f6 MongoDB \u4e2d\u90fd\u5b58\u5728\u6b63\u786e\u7684\u7d22\u5f15\u3002\u53ef\u4ee5\u5728\u5355\u72ec\u7ba1\u7406\u7d22\u5f15\u7684\u7cfb\u7edf\u4e2d\u7981\u7528\u6b64\u529f\u80fd\u3002\u7981\u7528\u6b64\u529f\u80fd\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002 2.5 \u62bd\u8c61\u7c7b \u00b6 \u5982\u679c\u4f60\u60f3\u4e3a\u6587\u6863\u6dfb\u52a0\u4e00\u4e9b\u5c5e\u6027\uff0c\u4e14\u4e0d\u60f3\u589e\u52a0\u7ee7\u627f\u3002\u53ef\u4ee5\u4f7f\u7528\u5728 meta \u4e2d\u4f7f\u7528 abstract: True . \u793a\u4f8b\uff1a class BaseDynamicDocument ( DynamicDocument ): \"\"\"\u6240\u6709model\u90fd\u7ee7\u627f\u6b64\u7c7b, \u7edf\u4e00\u7684\u65b9\u6cd5\u5199\u5728\u6b64\u7c7b\u91cc\"\"\" meta = { 'abstract' : True } @classmethod def get_by_id ( cls , _id , only_active = True , raise_error = False ): _obj = None _obj = cls . find_one ( only_active = only_active , _id = _id ) if not _obj and raise_error : table_name = getattr ( cls , 'TABLE_NAME' , None ) if not table_name : raise Exception ( ' %s \u7c7b\u6ca1\u6709\u6307\u5b9aTABLE_NAME' % cls . __name__ ) content = 'get_by_id not found object. class_name: %s , table_name: %s , _id: %s ' % \\ ( cls . __name__ , table_name , _id ) logger_error . error ( content ) raise BaseError ( RetCodeAndMessage . Common . miss_obj ( table_name )) return _obj @classmethod def find_one ( cls , only_active = True , ** kwargs ): return cls . find ( only_active = only_active , ** kwargs ) . limit ( 1 ) . first () @classmethod def find ( cls , only_active = True , ** kwargs ): if only_active and 'deleted' not in kwargs and getattr ( cls , 'deleted' , None ) is not None : # \u8e22\u51fa\u88ab\u903b\u8f91\u5220\u9664\u7684\u6587\u6863 if isinstance ( getattr ( cls , 'deleted' , None ), BooleanField ): kwargs . update ({ 'deleted__ne' : True }) elif isinstance ( getattr ( cls , 'deleted' , None ), IntField ): kwargs . update ({ 'deleted__ne' : 1 }) return cls . objects ( ** kwargs ) @classmethod def create ( cls , ** kwargs ): if 'ts' not in kwargs . keys (): ts = time . time () else : ts = kwargs . get ( 'ts' ) if isinstance ( getattr ( cls , 'ts' , None ), FloatField ) and 'ts' not in kwargs . keys (): kwargs [ 'ts' ] = ts if isinstance ( getattr ( cls , 'create_time' , None ), StringField ) and 'create_time' not in kwargs . keys (): kwargs [ 'create_time' ] = DateUtil . timestamp_to_datetime_str ( ts ) if isinstance ( getattr ( cls , 'dt' , None ), StringField ) and 'dt' not in kwargs . keys (): kwargs [ 'dt' ] = DateUtil . timestamp_to_datetime_str ( ts , fmt = DateUtil . DATE_FORMAT ) if isinstance ( getattr ( cls , 'create_dt' , None ), StringField ) and 'create_dt' not in kwargs . keys (): kwargs [ 'create_dt' ] = DateUtil . timestamp_to_datetime_str ( ts , fmt = DateUtil . DATE_FORMAT ) return cls ( ** kwargs ) @classmethod def get_or_create ( cls , _id , only_active = True ): obj = cls . get_by_id ( _id , only_active = only_active ) if not obj : pk_name = getattr ( cls , '_meta' , {}) . get ( 'id_field' ) obj = cls . create ( ** { pk_name : _id }) return obj def delete ( self , db_del = False , ** write_concern ): if not db_del and getattr ( self , 'deleted' , None ) is not None : if hasattr ( self , 'delete_time' ): setattr ( self , 'delete_time' , DateUtil . datetime_to_str ()) if isinstance ( getattr ( self , 'deleted' , None ), BooleanField ) \\ or isinstance ( getattr ( self , 'deleted' , None ), bool ): setattr ( self , 'deleted' , True ) super ( BaseDynamicDocument , self ) . save () elif isinstance ( getattr ( self , 'deleted' , None ), IntField ) \\ or isinstance ( getattr ( self , 'deleted' , None ), int ): setattr ( self , 'deleted' , 1 ) super ( BaseDynamicDocument , self ) . save () else : DingTalkMessage () . send_msg ( 'class: %s deleted type: %s ' % ( self . __name__ , type ( getattr ( self , 'deleted' , None )))) else : super ( BaseDynamicDocument , self ) . delete ( ** write_concern ) @classmethod def delete_batch ( cls , db_del = False , ** kwargs ): \"\"\"\u6279\u91cf\u5220\u9664\"\"\" if not db_del and getattr ( cls , 'deleted' , None ) is not None : update_str = {} now = DateUtil . datetime_to_str () if hasattr ( cls , 'delete_time' ): update_str [ 'delete_time' ] = now if isinstance ( getattr ( cls , 'deleted' , None ), BooleanField ): update_str [ 'deleted' ] = True elif isinstance ( getattr ( cls , 'deleted' , None ), IntField ): update_str [ 'deleted' ] = 1 else : DingTalkMessage () . send_msg ( 'class: %s deleted type: %s ' % ( cls . __name__ , type ( getattr ( cls , 'deleted' , None )))) cls . find ( ** kwargs ) . update ( ** update_str ) else : cls . find ( ** kwargs ) . delete () @classmethod def get_batch_by_id ( cls , ids , only_active = True ): \"\"\"\u6279\u91cf\u83b7\u53d6obj_dict\"\"\" if not ids : return {} objs = cls . find ( _id__in = ids , only_active = only_active ) objs_dict = { obj . id : obj for obj in objs } return objs_dict @queryset_manager def objects_not_delete ( doc_cls , queryset ): return queryset . filter ( deleted = 0 ) 2.6 \u6587\u6863\u5b9e\u4f8b \u00b6 \u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61\u3002 class Page ( Document ): title = StringField ( max_length = 200 , required = True ) meta = { 'allow_inheritance' : True } >>> page = Page ( title = \"Test Page\" ) >>> page . title 'Test Page' \u6301\u4e45\u5316\u548c\u5220\u9664\u6587\u6863 \u4f7f\u7528 save() \u65b9\u6cd5\u5373\u53ef\u6301\u4e45\u5316\u6570\u636e >>> page = Page ( title = \"Test Page\" ) >>> page . save () # \u4fdd\u5b58 >>> page . title = \"My Page\" >>> page . save () # \u4fee\u6539title\u503c\u540e \u518d\u6b21\u4fdd\u5b58 >>> page . id ObjectId ( '123456789abcdef000000000' ) >>> page . pk # \u67e5\u627e\u4e3b\u952e ObjectId ( '123456789abcdef000000000' ) \u4f7f\u7528 delete \u5373\u53ef\u5220\u9664\u6587\u6863 delete ( signal_kwargs = None , ** write_concern ) # \u793a\u4f8b p = Page . objects ( title = 'My Page' ) . first () p . delete () 2.7 \u67e5\u8be2\u6587\u6863 \u00b6 Document \u7c7b\u5177\u6709\u4e00\u4e2a objects \u5c5e\u6027\uff0c\u7528\u4e8e\u8bbf\u95ee\u4e0e\u7c7b\u5173\u8054\u7684\u6570\u636e\u5e93\u4e2d\u7684\u5bf9\u8c61\u3002\u8be5 objects \u5c5e\u6027\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a QuerySetManager \uff0c\u5b83\u5728\u8bbf\u95ee\u65f6\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 QuerySet \u5bf9\u8c61, \u53ef\u4ee5\u8fed\u4ee3\u8be5\u5bf9\u8c61\u4ee5\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6587\u6863 \u4f7f\u7528\u793a\u4f8b\uff1a # \u67e5\u8be2\u51fa\u56fd\u5bb6\u662f\u82f1\u56fd\u7684\u6240\u6709\u7528\u6237 uk_users = User . objects ( country = 'uk' ) # auther\u662f\u4e00\u4e2a\u5d4c\u5165\u6587\u6863\u5b57\u6bb5\uff0ccountry\u662f\u5d4c\u5165\u6587\u6863\u7684field\uff0c\u901a\u8fc7auther__country\u7684\u65b9\u5f0f\u8bbf\u95ee\u503c uk_pages = Page . objects ( author__country = 'uk' ) # \u67e5\u8be218\u5c81\u4ee5\u4e0b\u7684\u7528\u6237 young_users = Users . objects ( age__lte = 18 ) \u5e38\u7528\u7684\u8fd0\u7b97\u7b26\u5982\u4e0b\uff1a ne : \u4e0d\u7b49\u4e8e lt \uff1a\u5c0f\u4e8e lte \uff1a \u5c0f\u4e8e\u7b49\u4e8e gt : \u5927\u4e8e gte \uff1a \u5927\u4e8e\u7b49\u4e8e in : \u5728\u5217\u8868\u4e2d nin \uff1a\u4e0d\u518d\u503c\u5217\u8868\u4e2d all \uff1a \u63d0\u4f9b\u7684\u503c\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u9879\u76ee\u90fd\u5728\u6570\u7ec4\u4e2d\uff08\u67e5\u8be2\u7ed3\u679c\u96c6\u4e3a\u7ed9\u5b9a\u503c\u96c6\u7684\u5b50\u96c6\uff09 size \uff1a \u6570\u7ec4\u5927\u5c0f exists : \u5b57\u6bb5\u503c\u5b58\u5728 \u5b57\u7b26\u4e32\u67e5\u8be2 \u00b6 \u4ee5\u4e0b\u8fd0\u7b97\u7b26\u53ef\u7528\u4f5c\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u8be2\uff1a exact - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4e0e\u503c\u5b8c\u5168\u5339\u914d iexact - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4e0e\u503c\u5b8c\u5168\u5339\u914d\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09 contains - \u5b57\u7b26\u4e32\u5b57\u6bb5\u5305\u542b\u503c icontains - \u5b57\u7b26\u4e32\u5b57\u6bb5\u5305\u542b\u503c\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09 startswith - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4ee5\u503c\u5f00\u5934 istartswith - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4ee5\u503c\u5f00\u5934\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09 endswith - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4ee5\u503c\u7ed3\u5c3e iendswith - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4ee5\u503c\u7ed3\u5c3e\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09 match - \u6267\u884c$ elemMatch\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u5339\u914d\u6570\u7ec4\u4e2d\u7684\u6574\u4e2a\u6587\u6863 \u539f\u59cb\u67e5\u8be2 \u00b6 \u5982\u679c\u5e0c\u671b\u4f7f\u7528pymongo\u64cd\u4f5c\u6570\u636e\u5e93\uff0c\u53ef\u4ee5\u4f7f\u7528__raw__\u5173\u952e\u5b57\uff1a Page . objects ( __raw__ = { 'tags' : 'coding' }) PyMongo \u2014 MongoDB Drivers \u9650\u5236\u4e0e\u8df3\u8fc7\u67e5\u8be2 \u00b6 # \u67e5\u8be2\u524d\u4e94\u6761\u6587\u6863 users = User . objects [: 5 ] # \u67e5\u8be2\u7b2c\u516d\u6761\u4ee5\u540e\u7684\u6240\u6709\u6587\u6863 users = User . objects [ 5 :] # \u67e5\u8be2\u7b2c\u5341\u4e00\u5230\u7b2c\u5341\u4e94\u6761\u6587\u6863 users = User . objects [ 10 : 15 ] >>> # \u786e\u8ba4\u6570\u636e\u5e93\u4e2d\u4e0d\u5b58\u5728\u6587\u6863 >>> User . drop_collection () >>> User . objects [ 0 ] IndexError : list index out of range === \u300b \u62a5IndexError\u7684\u9519 >>> User . objects . first () == None True >>> User ( name = 'Test User' ) . save () >>> User . objects [ 0 ] == User . objects . first () True \u805a\u5408\u67e5\u8be2 \u00b6 \u5e38\u7528\u805a\u5408\u67e5\u8be2\u793a\u4f8b\uff1a # \u6c42\u603b\u6570 num_users = User . objects . count () # \u6c42\u548c yearly_expense = Employee . objects . sum ( 'salary' ) # \u6c42\u5e73\u5747\u503c mean_age = User . objects . average ( 'age' ) \u9650\u5236\u67e5\u8be2 \u00b6 \u641c\u7d22\u6587\u6863\u5b50\u96c6 >>> class Film ( Document ): ... title = StringField () ... year = IntField () ... rating = IntField ( default = 3 ) ... >>> Film ( title = 'The Shawshank Redemption' , year = 1994 , rating = 5 ) . save () >>> f = Film . objects . only ( 'title' ) . first () >>> f . title 'The Shawshank Redemption' >>> f . year # None >>> f . rating # default value 3 post = BlogPost . objects . exclude ( 'title' ) . exclude ( 'author.name' ) # \u67e5\u8be2\u51fa\u9664\u4e86title\u548cauther.name\u5b57\u6bb5\u7684\u5185\u5bb9 \u9ad8\u7ea7\u67e5\u8be2 \u00b6 \u5982\u679c\u5e0c\u671b\u901a\u8fc7 or \u6216\u8005 and \u6765\u591a\u6761\u4ef6\u67e5\u8be2\u65f6\uff0c\u9700\u8981\u4f7f\u7528 Q(\u6761\u4ef6\u8bed\u53e51) | Q(\u6761\u4ef6\u8bed\u53e52) Q(\u6761\u4ef6\u8bed\u53e51) | Q(\u6761\u4ef6\u8bed\u53e52) from mongoengine.queryset.visitor import Q # \u83b7\u53d6\u5df2\u53d1\u5e03\u7684\u6587\u6863 Post . objects ( Q ( published = True ) | Q ( publish_date__lte = datetime . now ())) # \u83b7\u53d6 featured\u4e3a\u771f \u540c\u65f6 hits\u5927\u4e8e\u7b49\u4e8e1000\u6216\u5927\u4e8e\u7b49\u4e8e5000 \u7684\u6587\u6863 Post . objects (( Q ( featured = True ) & Q ( hits__gte = 1000 )) | Q ( hits__gte = 5000 )) \u539f\u5b50\u66f4\u65b0 \u00b6 \u66f4\u65b0\u65b9\u6cd5\u6709\uff1a update(), update_one(), modify() \u66f4\u65b0\u4fee\u9970\u7b26\u6709\uff1a set - \u91cd\u65b0\u8bbe\u7f6e\u4e00\u4e2a\u503c unset - \u5220\u9664 inc - \u52a0 dec - \u51cf push - \u5c06\u65b0\u503c\u6dfb\u52a0\u5230\u5217\u8868\u4e2d push_all - \u5c06\u591a\u4e2a\u503c\u6dfb\u52a0\u5230\u5217\u8868\u4e2d pop - \u6839\u636e\u503c\u5220\u9664\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u6216\u6700\u540e\u4e00\u4e2a\u5143\u7d20 pull - \u4ece\u5217\u8868\u4e2d\u5220\u9664\u503c pull_all - \u4ece\u5217\u8868\u4e2d\u5220\u9664\u591a\u4e2a\u503c add_to_set - \u4ec5\u5f53\u5217\u8868\u4e2d\u7684\u503c\u4e0d\u5728\u5217\u8868\u4e2d\u65f6\u624d\u4e3a\u5176\u6dfb\u52a0\u503c >>> post = BlogPost ( title = 'Test' , page_views = 0 , tags = [ 'database' ]) >>> post . save () >>> BlogPost . objects ( id = post . id ) . update_one ( inc__page_views = 1 ) >>> post . reload () # \u503c\u5df2\u88ab\u4fee\u6539\uff0c\u91cd\u65b0\u52a0\u8f7d\u6570\u636e >>> post . page_views 1 >>> BlogPost . objects ( id = post . id ) . update_one ( set__title = 'Example Post' ) >>> post . reload () >>> post . title 'Example Post' >>> BlogPost . objects ( id = post . id ) . update_one ( push__tags = 'nosql' ) >>> post . reload () >>> post . tags [ 'database' , 'nosql' ] \u26a0\ufe0f\u6ce8\u610f\uff1a\u5982\u679c\u672a\u6307\u5b9a\u4fee\u9970\u8fd0\u7b97\u7b26\uff0c\u5219\u9ed8\u8ba4\u4e3a $set .\u5373\u4e0b\u9762\u4e24\u79cd\u5199\u6cd5\u662f\u4e00\u6837\u7684 >>> BlogPost . objects ( id = post . id ) . update ( title = 'Example Post' ) >>> BlogPost . objects ( id = post . id ) . update ( set__title = 'Example Post' ) MongoEngine\u4e2d\u6587\u6587\u6863 - zhenyuantg - \u535a\u5ba2\u56ed (cnblogs.com) celery \u00b6 Celery - \u7b80\u4e66 (jianshu.com) \u6293\u5305\u5f00\u53d1 \u00b6 \u56e0\u4e3a\u8be5\u9879\u76ee\u5ba2\u6237\u7aef\u4e3a Android App \uff0c\u6240\u4ee5 App \u8bbf\u95ee\u7684\u8d44\u6e90\u9700\u8981\u901a\u8fc7\u6293\u5305\u5de5\u5177\u8fdb\u884c\u786e\u8ba4\u3002 \u76ee\u524d\u516c\u53f8\u5185\u6240\u4f7f\u7528\u7684\u5de5\u5177\u662f mac OS \u4e0a\u7684 Charles ,\u4f7f\u7528\u8be5\u5de5\u5177\u53ea\u9700\u5c06\u624b\u673a\u4e0a\u7684 wifi \u914d\u7f6e\u597d\u6307\u5b9a\u7684\u4ee3\u7406\u5373\u53ef\u3002 \u53ef\u53c2\u89c1\u6b64\u6587\u6863\u8fdb\u884c\u8bbe\u7f6e\uff1a Charles \u624b\u673a\u6293\u5305\u8bb0\u5f55 \u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u6253\u5f00 App \u5373\u53ef\u770b\u5230\u6293\u5305\u8bb0\u5f55\u3002","title":"\u540e\u7aefPython\u9879\u76ee\u5e38\u7528\u5de5\u5177\u89e3\u7b54\u6587\u6863"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_1","text":"\u672c\u6587\u7528\u4e8e\u89e3\u91ca\u5f53\u524d\u6d41\u4f53\u7f51\u7edc\u540e\u7aef Python \u9879\u76ee\u4e2d\u90e8\u5206\u5199\u6cd5\u7684\u89e3\u91ca\u548c\u4e00\u4e9b\u5f15\u7528\u7684\u7b2c\u4e09\u65b9\u5305\u529f\u80fd\u7684\u4f7f\u7528\u3002 \u672c\u6587\u4ee5 poros \u9879\u76ee\u4e3a\u4f8b(\u4e0b\u6587\u4e0d\u518d\u5177\u4f53\u8bf4\u660e)\uff0c\u672c\u6587\u5199\u4f5c\u65f6\u5176\u4ee3\u7801\u7ed3\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 admin_app . py \u251c\u2500\u2500 app . py # \u670d\u52a1\u5165\u53e3\u6587\u4ef6 \u251c\u2500\u2500 apps # \u5305\u542b app\u5de5\u5382\u548c\u5176\u4ed6\u529f\u80fd\u903b\u8f91 \u251c\u2500\u2500 celery_app . py # \u65b0\u5efa\u4e00\u4e2a celery app \u251c\u2500\u2500 common # \u4e3a\u89e3\u51b3\u51b2\u7a81\u65b0\u5efa\u7684\u6587\u4ef6(\u672a\u786e\u5b9a) \u251c\u2500\u2500 conf # \u914d\u7f6e\u6587\u4ef6 \u251c\u2500\u2500 data # \u524d\u7aef\u793c\u7269\u5217\u8868 \u251c\u2500\u2500 entity # mongodb \u7684\u5b58\u50a8\u5bf9\u8c61 \u251c\u2500\u2500 errors # \u57fa\u7840\u9519\u8bef\u7c7b\u81ea\u5b9a\u4e49\u96c6\u5408 \u251c\u2500\u2500 female_logic # \u5973\u5609\u5bbe\u4e0a\u9ea6\u5956\u52b1\u903b\u8f91 \u251c\u2500\u2500 ipython_config . py # ipython \u914d\u7f6e\u6587\u4ef6(\u7591\u4f3c\u65e0\u6548) \u251c\u2500\u2500 log_config . py # \u65e5\u5fd7\u914d\u7f6e\u5e76\u521d\u59cb\u5316\u90e8\u5206logger\u5bf9\u8c61 \u251c\u2500\u2500 logic # \u4e3b\u8981\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\u5b9e\u73b0 \u251c\u2500\u2500 manage . py # \u4e00\u4e2a\u4e1a\u52a1\u811a\u672c\uff0c\u4ee5ipython\u65b9\u5f0f\u6253\u5370\u7ed3\u679c \u251c\u2500\u2500 redis_client . py # \u521d\u59cb\u5316redis\u5b9e\u4f8b \u251c\u2500\u2500 requirements . txt \u251c\u2500\u2500 restart . sh # shell\u65b9\u5f0f\u91cd\u542f\u7cfb\u7edf\u811a\u672c \u251c\u2500\u2500 run # \u542f\u52a8\u6587\u4ef6\u914d\u7f6e\u96c6\u5408 \u251c\u2500\u2500 schema # orm \u5b9e\u73b0\u5e8f\u5217\u5316\u7684\u96c6\u5408 \u251c\u2500\u2500 setup # docker\u914d\u7f6e\u53ca\u7a0b\u5e8f\u542f\u52a8shell\u811a\u672c \u251c\u2500\u2500 shell_script # shell \u811a\u672c \u251c\u2500\u2500 tasks # \u5f02\u6b65\u4efb\u52a1\u96c6\u5408 \u251c\u2500\u2500 templates # \u540e\u53f0\u524d\u7aef\u6587\u4ef6 \u251c\u2500\u2500 test # \u5355\u5143\u6d4b\u8bd5\u6587\u4ef6\u96c6\u5408 \u251c\u2500\u2500 tmp_scripts # \u4e34\u65f6\u811a\u672c\u96c6\u5408 \u251c\u2500\u2500 util # \u901a\u7528\u5de5\u5177\u96c6\u5408 \u2514\u2500\u2500 views # \u5bf9\u5916\u63a5\u53e3\u96c6\u5408","title":"\u6587\u6863\u8bf4\u660e"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_2","text":"","title":"\u5199\u6cd5"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_3","text":"\u9879\u76ee\u521b\u5efa\u91c7\u7528 \u5e94\u7528\u5de5\u5382 \u7684\u65b9\u5f0f\u521b\u5efa app , \u5e76\u521d\u59cb\u5316\u5e94\u7528\u7684\u57fa\u672c\u529f\u80fd. # app.py from apps import create_app app = create_app () # apps/__init__.py def create_app ( config_object = 'conf.settings' ): \"\"\"Create application factory, as explained here: http://flask.pocoo.org/docs/patterns/appfactories/.\"\"\" app = Flask ( __name__ ) app . config . from_object ( config_object ) configure_logger ( app ) filter_warning () register_extensions ( app ) register_sentry ( app ) register_json_encoder ( app ) # register_db(app) register_redis ( app ) register_blueprints ( app ) register_apispec ( app ) register_errorhandler ( app ) register_request_handle ( app ) # register_ab_test() return app \u5177\u4f53\u521d\u59cb\u5316\u529f\u80fd\u5982\u4e0b\uff1a \u5bfc\u5165\u914d\u7f6e\u6587\u4ef6 \u5bfc\u5165\u6587\u4ef6\u65b9\u5f0f\u4e3a\u914d\u7f6e\u5bf9\u8c61\u52a0\u8f7d\u3002\u8bb2\u914d\u7f6e\u6587\u4ef6\u540d\u79f0\u4f5c\u4e3a\u5bf9\u8c61\u540d\u79f0\u5bfc\u5165 \u521d\u59cb\u5316\u65e5\u5fd7\u7ea7\u522b \u914d\u7f6e warning \u65e5\u5fd7\u8fc7\u6ee4\u5668\u3002\u5ffd\u7565 warning \u65e5\u5fd7 \u521d\u59cb\u5316\u63d2\u4ef6(\u8bbe\u7f6e\u7f13\u5b58\u8bb0\u5f55\u5668\u4e3a redis ,\u8bbe\u7f6e\u56db\u4e2a\u4e0d\u540c\u4e1a\u52a1\u573a\u666f\u7684\u5f02\u6b65 celery ) \u6ce8\u518c sentry \u65e5\u5fd7\u76d1\u5bdf\u6a21\u5757 \u81ea\u5b9a\u4e49\u5e94\u7528 json \u5e8f\u5217\u5316\u5668 \u8fde\u63a5 redis \u6ce8\u518c\u84dd\u56fe \u6ce8\u518c swagger api \u7ba1\u7406\u6a21\u5757 \u81ea\u5b9a\u4e49\u9519\u8bef\u5904\u7406\u6a21\u5757 \u751f\u547d\u5468\u671f\u8bb0\u5f55 \u53e6\u6709 before_request \u521d\u59cb\u5316\u53c2\u6570\u4f4d\u7f6e\u7edf\u4e00\u653e\u5230 request.all_param \u4e2d \u4ec5 json \u53c2\u6570\u548c args \u53c2\u6570 \u8fd8\u6709 after_request \u7edf\u4e00\u6253\u5370\u6bcf\u4e00\u4e2a\u8bf7\u6c42\u7684 ip \u5730\u5740\u3001\u5177\u4f53\u8def\u5f84\u3001\u8bbf\u95ee\u65b9\u5f0f\u3001\u53c2\u6570\u5185\u5bb9\u3001\u8fd4\u56de\u7ed3\u679c\u3001\u8fd4\u56de\u72b6\u6001\u7b49\u6570\u636e\u3002 swagger \u548c flask-apispec \u8bbf\u95ee\u6570\u636e\u4e0d\u7528\u6253\u5370\u8be6\u7ec6\u65e5\u5fd7","title":"\u5e94\u7528\u521b\u5efa"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_4","text":"\u63a5\u53e3\u7f16\u5199\u91c7\u7528\u51fd\u6570\u89c6\u56fe\uff0c\u4e00\u822c\u8f85\u4e4b\u4ee5\u4e00\u5b9a\u7684\u88c5\u9970\u5668\u3002 \u5e38\u7528\u7684\u88c5\u9970\u5668\u6709\u4f5c\u4e3a\u89c6\u56fe\u51fd\u6570\u7684\u8def\u7531\u8bbe\u5b9a\uff0c\u53c2\u6570\u6821\u9a8c\uff0c\u8fd4\u56de\u6570\u636e\u9650\u5b9a\u4e0e\u683c\u5f0f\u5316\uff0c\u548c\u767b\u5f55\u8ba4\u8bc1\u56db\u79cd\u3002 \u63a5\u53e3\u4e1a\u52a1\u903b\u8f91\u5185\u5bb9\u4ee5 mongodb \u548c redis \u4e92\u76f8\u914d\u5408\uff0c\u52a0\u4e4b\u4e00\u5b9a\u7684\u4e1a\u52a1\u903b\u8f91\u4e3a\u4e3b\u3002 \u4ee5 apps/couple/get_newr_female_list \u51fd\u6570\u4e3a\u4f8b\u3002\u622a\u53d6\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a @couple_app . route ( '/near_female/list' , methods = [ 'POST' ]) # \u8def\u7531\u8bbe\u7f6e\u65b9\u5f0f @use_kwargs ({ 'only_voice_room' : fields . Bool ( required = True , description = '\u662f\u5426\u5f00\u9ed1\u623f' )}) # \u5fc5\u8981\u53c2\u6570\u8bbe\u7f6e\u4e0e\u6ce8\u91ca @marshal_with ( NearFemaleSchema ( many = True ), apply = False ) # \u8fd4\u56de\u6570\u636e\u683c\u5f0f @login_required () # \u9650\u5b9a\u767b\u5f55\u7528\u6237 def get_near_female_list ( only_voice_room ): \"\"\"\u83b7\u53d6\u719f\u4eba\u5217\u8868\"\"\" user = request . user # \u9650\u5b9a\u767b\u5f55\u7528\u6237\u63a5\u53e3\u4f1a\u7531 login_required \u88c5\u9970\u5668\u6839\u636e\u7528\u6237\u7684 token \u67e5\u8be2\u7528\u6237\u4fe1\u606f\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u4fe1\u606f\u5230 request.user \u4e2d if not NearListTest . is_test_group ( user . user_id ): return response_util . response ( response_util . RetCodeAndMessage . Success , data = []) # \u5411 mongodb \u67e5\u8be2\u6570\u636e rooms = CoupleRoom . objects_not_delete ( is_online = True , room_type__in = ( CoupleRoom . CoupleRoomType . DEFAULT , CoupleRoom . CoupleRoomType . FIVE_ROOM )) if only_voice_room : rooms = rooms ( only_voice_room = True , voice_chatting = None ) else : rooms = rooms ( only_voice_room__ne = True , voice_chatting = None ) user_ip = request . headers . get ( \"X-Real-Ip\" , \"\" ) test_couple_room_user = rds . smembers ( 'test_couple_room_user' ) near_female_map = NearScoreSvc . get_near_map ( user . user_id , score = 15 ) data_list = [] for room in rooms : # \u6d4b\u8bd5\u623f\u95f4\u4ec5\u516c\u53f8ip or \u6d4b\u8bd5\u767d\u540d\u5355 \u663e\u793a if ( IsCoupleRoomWhite . is_white_account ( room . room_id ) and user_ip != constants . OFFICE_IP and user . user_id not in test_couple_room_user ): continue on_mic_user_map = room . get_room_on_mic_user_map () has_male = on_mic_user_map . get ( CoupleRoom . MicPosition . MIC1 ) if room . room_type == CoupleRoom . CoupleRoomType . FIVE_ROOM : has_male = has_male and on_mic_user_map . get ( CoupleRoom . MicPosition . MIC3 ) for position , mic_info in on_mic_user_map . items (): if position not in ( CoupleRoom . MicPosition . ANCHOR , CoupleRoom . MicPosition . MIC2 , CoupleRoom . MicPosition . MIC4 ): continue female_id = mic_info [ 'user_id' ] # \u8df3\u8fc7\u975e\u719f\u4eba\u623f\u95f4 if female_id not in near_female_map : continue data_list . append ({ 'room_id' : room . room_id , 'im_room_id' : room . im_room_id , 'female_uid' : female_id , 'status_str' : '\u5f00\u9ed1\u4e2d' if room . voice_chatting else '\u6b63\u5728\u627eCP' , 'has_male' : bool ( has_male ), 'room_type' : room . room_type , 'near_score' : int ( near_female_map . get ( female_id )), 'mic_pos' : mic_info . get ( 'position' , - 1 ) }) # \u6392\u5e8f \u53d6\u524d20\u4e2a data_list . sort ( key = lambda x : ( x [ 'has_male' ], - near_female_map . get ( x [ 'female_uid' ], 0 ))) data_list = data_list [: 20 ] fill_user_info ( data_list , user_id_key = 'female_uid' ) # \u81ea\u5b9a\u4e49response\u5904\u7406\u5668\uff0c\u53ef\u7f13\u5b58\u63a5\u53e3\u6570\u636e\uff0c\u6dfb\u52a0\u90e8\u5206\u53c2\u6570(im_video_token) return response_util . response ( response_util . RetCodeAndMessage . Success , data = data_list ) \u63a5\u53e3\u7684\u88c5\u9970\u5668\u6570\u91cf\u548c\u5fc5\u8981\u6027\u5e94\u6839\u636e\u5b9e\u9645\u63a5\u53e3\u8bf7\u6c42\u4e3a\u51c6\u3002 \u8fd4\u56de\u7ed3\u679c\u4e5f\u5e76\u4e0d\u4e00\u5b9a\u5b8c\u5168\u91c7\u7528\u81ea\u5b9a\u4e49\u7684 response_util.response .(\u5982 poros/views/gift/gift_list_info \u89c6\u56fe\u51fd\u6570)","title":"\u63a5\u53e3\u7f16\u5199\u4e0e\u8fd4\u56de"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_5","text":"\u6b64\u9879\u76ee\u91c7\u7528\u4e3b\u8981\u5b58\u50a8\u65b9\u5f0f\u4e3a mongodb \uff0c\u5e76\u91c7\u7528\u4e86 restful \u5f62\u5f0f\u7684 api \u7ba1\u7406\u3002\u5728\u4ee3\u7801\u4e2d\u6d89\u53ca\u5230\u4e86\u8f83\u591a\u7684\u5305\u7684\u4f7f\u7528\u3002 \u8fd9\u91cc\u9644\u4e0a\u90e8\u5206\u5305\u7684\u4ecb\u7ecd\u8bf4\u660e\u548c\u4f7f\u7528\u65b9\u5f0f","title":"\u5305"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#marshmallow","text":"marshmallow \u662f\u4e00\u4e2a\u7528\u6765\u5c06\u590d\u6742\u7684 orm \u5bf9\u8c61\u4e0e python \u539f\u751f\u6570\u636e\u7c7b\u578b\u4e4b\u95f4\u76f8\u4e92\u8f6c\u6362\u7684\u5e93\uff0c\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u5b9e\u73b0 object -> dict \uff0c objects -> list , string -> dict \u548c string -> list \u3002 \u5e8f\u5217\u5316\uff1a\u5e8f\u5217\u5316\u7684\u610f\u601d\u662f\u5c06\u6570\u636e\u5bf9\u8c61\u8f6c\u5316\u4e3a\u53ef\u5b58\u50a8\u6216\u53ef\u4f20\u8f93\u7684\u6570\u636e\u7c7b\u578b \u53cd\u5e8f\u5217\u5316\uff1a\u5c06\u53ef\u5b58\u50a8\u6216\u53ef\u4f20\u8f93\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u5316\u4e3a\u6570\u636e\u5bf9\u8c61 \u8981\u8fdb\u884c\u5e8f\u5217\u5316\u6216\u53cd\u5e8f\u5217\u5316\uff0c\u9996\u5148\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u7528\u6765\u64cd\u4f5c\u7684object\uff0c\u8fd9\u91cc\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff1a import datetime as dt class User : def __init__ ( self , name , email ): self . name = name self . email = email self . created_time = dt . datetime . now () def __repr__ ( self ): return \"<User(name= {self.name!r} )>\" . format ( self = self )","title":"marshmallow"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#1scheme","text":"\u8981\u5bf9\u4e00\u4e2a\u7c7b\u6216\u8005\u4e00\u4e2ajson\u6570\u636e\u5b9e\u73b0\u76f8\u4e92\u8f6c\u6362(\u5373\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316), \u9700\u8981\u4e00\u4e2a\u4e2d\u95f4\u8f7d\u4f53, \u8fd9\u4e2a\u8f7d\u4f53\u5c31\u662fSchema\uff0c\u53e6\u5916Schema\u8fd8\u53ef\u4ee5\u7528\u6765\u505a\u6570\u636e\u9a8c\u8bc1\u3002 # \u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684Scheme from marshmallow import Schema , fields class UserSchema ( Schema ): name = fields . String () email = fields . Email () created_time = fields . DateTime ()","title":"1\u3001Scheme"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#2serializing","text":"\u4f7f\u7528scheme\u7684dump()\u65b9\u6cd5\u6765\u5e8f\u5217\u5316\u5bf9\u8c61\uff0c\u8fd4\u56de\u7684\u662fdict\u683c\u5f0f\u7684\u6570\u636e \u53e6\u5916schema\u7684dumps()\u65b9\u6cd5\u5e8f\u5217\u5316\u5bf9\u8c61\uff0c\u8fd4\u56de\u7684\u662fjson\u7f16\u7801\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u3002 user = User ( \"lhh\" , \"2432783449@qq.com\" ) schema = UserSchema () res = schema . dump ( user ) print ( res ) # { ' email ' : ' 2432783449 @qq.com ' , ' created_time ' : ' 2021 - 05 - 28 20 : 43 : 08.946112 ' , ' name ' : ' lhh ' } dict res2 = schema . dumps ( user ) print ( res2 ) # ' { \"name\" : \"lhh\" , \"email\" : \"2432783449@qq.com\" , \"created_time\" : \"2021-05-28 20:45:17.418739\" } ' json","title":"2\u3001Serializing(\u5e8f\u5217\u5316)"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#3","text":"\u5f53\u4e0d\u9700\u8981\u8f93\u51fa\u6240\u6709\u7684\u5b57\u6bb5\u65f6\uff0c\u53ef\u4ee5\u5728\u5b9e\u4f8b\u5316Scheme\u65f6\uff0c\u58f0\u660eonly\u53c2\u6570\uff0c\u6765\u6307\u5b9a\u8f93\u51fa\uff1a summary_schema = UserSchema ( only = { \"name\" , \"email\" }) res = summary_schema . dump ( user ) print ( res ) # { \"name\" : \"lhh\" , \"email\" : \"2432783449@qq.com\" }","title":"3\u3001\u8fc7\u6ee4\u8f93\u51fa"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#4deserializing","text":"schema\u7684load()\u65b9\u6cd5\u4e0edump()\u65b9\u6cd5\u76f8\u53cd\uff0c\u7528\u4e8edict\u7c7b\u578b\u7684\u53cd\u5e8f\u5217\u5316\u3002\u4ed6\u5c06\u8f93\u5165\u7684\u5b57\u5178\u683c\u5f0f\u6570\u636e\u8f6c\u6362\u6210\u5e94\u7528\u5c42\u6570\u636e\u7ed3\u6784\u3002\u4ed6\u4e5f\u80fd\u8d77\u5230\u9a8c\u8bc1\u8f93\u5165\u7684\u5b57\u5178\u683c\u5f0f\u6570\u636e\u7684\u4f5c\u7528\u3002 \u540c\u6837\uff0c\u4e5f\u6709\u5bf9json\u89e3\u7801\u7684loads()\u65b9\u6cd5\u3002\u7528\u4e8estring\u7c7b\u578b\u7684\u53cd\u5e8f\u5217\u5316\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cload()\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5b57\u5178\uff0c\u5f53\u8f93\u5165\u7684\u6570\u636e\u7684\u503c\u4e0d\u5339\u914d\u5b57\u6bb5\u7c7b\u578b\u65f6\uff0c\u629b\u51fa ValidationError \u5f02\u5e38\u3002 user_data = { \"name\" : \"lhh\" , \"email\" : \"2432783449@qq.com\" , \"created_time\" : \"2021-05-28 20:45:17.418739\" } schema = UserSchema () res = schema . load ( user_data ) print ( res ) # { ' created_time ' : ' 2021 - 05 - 28 20 : 45 : 17.418739 ' , ' email ' : ' 2432783449 @qq.com ' , ' name ' : ' lhh ' } \u5bf9\u53cd\u5e8f\u5217\u5316\u800c\u8a00, \u5c06\u4f20\u5165\u7684dict\u53d8\u6210object\u66f4\u52a0\u6709\u610f\u4e49. \u5728Marshmallow\u4e2d, dict -> object\u7684\u65b9\u6cd5\u9700\u8981\u81ea\u5df1\u5b9e\u73b0, \u7136\u540e\u5728\u8be5\u65b9\u6cd5\u524d\u9762\u52a0\u4e0a\u4e00\u4e2a\u88c5\u9970\u5668post_load\u5373\u53ef class UserSchema ( Schema ): name = fields . String () email = fields . Email () created_time = fields . DateTime () @post_load def make_user ( self , data ): return User ( ** data ) \u8fd9\u6837\u6bcf\u6b21\u8c03\u7528load()\u65b9\u6cd5\u65f6, \u4f1a\u6309\u7167make_user\u7684\u903b\u8f91, \u8fd4\u56de\u4e00\u4e2aUser\u7c7b\u5bf9\u8c61\u3002 user_data = { \"name\" : \"lhh\" , \"email\" : \"2432783449@qq.com\" } schema = UserSchema () res = schema . load ( user_data ) print ( res ) # < __main__ . User object at 0x0000027BE9678128 > user = res print ( \"name: {} email: {}\" . format ( user . name , user . email )) # name : lhh email : 2432783449 @qq.com","title":"4\u3001Deserializing(\u53cd\u5e8f\u5217\u5316)"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#5","text":"\u591a\u4e2a\u5bf9\u8c61\u7684\u96c6\u5408\u5982\u679c\u662f\u53ef\u8fed\u4ee3\u7684\uff0c\u90a3\u4e48\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5bf9\u8fd9\u4e2a\u96c6\u5408\u8fdb\u884c\u5e8f\u5217\u5316\u6216\u8005\u53cd\u5e8f\u5217\u5316\u3002\u5728\u5b9e\u4f8b\u5316Scheme\u7c7b\u65f6\u8bbe\u7f6e\u53c2\u6570many=True \u4e5f\u53ef\u4ee5\u4e0d\u5728\u5b9e\u4f8b\u5316\u7c7b\u7684\u65f6\u5019\u8bbe\u7f6e\uff0c\u800c\u5728\u8c03\u7528dump()\u65b9\u6cd5\u7684\u65f6\u5019\u4f20\u5165\u8fd9\u4e2a\u53c2\u6570\u3002 user1 = User ( name = \"lhh1\" , email = \"2432783449@qq.com\" ) user2 = User ( name = \"lhh2\" , email = \"2432783449@qq.com\" ) users = [ user1 , user2 ] # \u7b2c\u4e00\u79cd\u65b9\u6cd5 schema = UserSchema ( many = True ) res = schema . dump ( users ) print ( res ) # \u7b2c\u4e8c\u79cd\u65b9\u6cd5 schema = UserSchema () res = schema . dump ( users , many = True ) print ( res ) # [ { ' name ' : u ' Mick ' , # ' email ' : u ' mick @stones.com ' , # ' created_at ' : ' 2014 - 08 - 17 T14 : 58 : 57.600623 + 00 : 00 ' } # { ' name ' : u ' Keith ' , # ' email ' : u ' keith @stones.com ' , # ' created_at ' : ' 2014 - 08 - 17 T14 : 58 : 57.600623 + 00 : 00 ' } ]","title":"5\u3001\u5904\u7406\u591a\u4e2a\u5bf9\u8c61\u7684\u96c6\u5408"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#6validation","text":"\u5f53\u4e0d\u5408\u6cd5\u7684\u6570\u636e\u901a\u8fc7Schema.load()\u6216\u8005Schema.loads()\u65f6\uff0c\u4f1a\u629b\u51fa\u4e00\u4e2a ValidationError \u5f02\u5e38\u3002ValidationError.messages\u5c5e\u6027\u6709\u9a8c\u8bc1\u9519\u8bef\u4fe1\u606f\uff0c\u9a8c\u8bc1\u901a\u8fc7\u7684\u6570\u636e\u5728 ValidationError.valid_data \u5c5e\u6027\u4e2d \u6211\u4eec\u6355\u83b7\u8fd9\u4e2a\u5f02\u5e38\uff0c\u7136\u540e\u505a\u5f02\u5e38\u5904\u7406\u3002\u9996\u5148\u9700\u8981\u5bfc\u5165ValidationError\u8fd9\u4e2a\u5f02\u5e38 from marshmallow import Schema , fields , ValidationError class UserSchema ( Schema ): name = fields . String () email = fields . Email () created_time = fields . DateTime () try : res = UserSchema (). load ({ \"name\" : \"lhh\" , \"email\" : \"lhh\" }) except ValidationError as e : print ( f \"\u9519\u8bef\u4fe1\u606f\uff1a{e.messages} \u5408\u6cd5\u6570\u636e:{e.valid_data}\" ) ''' \u5f53\u9a8c\u8bc1\u4e00\u4e2a\u6570\u636e\u96c6\u5408\u7684\u65f6\u5019 \uff0c \u8fd4\u56de\u7684\u9519\u8bef\u4fe1\u606f\u4f1a\u4ee5 \u9519\u8bef\u5e8f\u53f7 - \u9519\u8bef\u4fe1\u606f \u7684\u952e\u503c\u5bf9\u5f62\u5f0f\u4fdd\u5b58\u5728errors\u4e2d ''' user_data = [ { ' email ' : ' 2432783449 @qq.com ' , ' name ' : ' lhh ' }, { ' email ' : ' invalid ' , ' name ' : ' Invalid ' }, { ' name ' : ' wcy ' }, { ' email ' : ' 2432783449 @qq.com ' }, ] try : schema = UserSchema ( many = True ) res = schema . load ( user_data ) print ( res ) except ValidationError as e : print ( \"\u9519\u8bef\u4fe1\u606f\uff1a{} \u5408\u6cd5\u6570\u636e\uff1a{}\" . format ( e . messages , e . valid_data )) \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\uff0c\u6709\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u5bf9\u4e8e\u6ca1\u6709\u4f20\u5165\u7684\u5c5e\u6027\u5219\u6ca1\u6709\u68c0\u67e5\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u89c4\u5b9a\u5c5e\u6027\u5fc5\u987b\u4f20\u5165\u3002 \u5728Schema\u91cc\u89c4\u5b9a\u4e0d\u53ef\u7f3a\u7701\u5b57\u6bb5\uff1a\u8bbe\u7f6e\u53c2\u6570required=True \u53ef\u4ee5\u770b\u5230\u4e0a\u9762\uff0c\u6709\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u662f\u5bf9\u4e8e\u6ca1\u6709\u4f20\u5165\u7684\u5c5e\u6027\u5219\u6ca1\u6709\u68c0\u67e5\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u89c4\u5b9a\u5c5e\u6027\u5fc5\u987b\u4f20\u5165\u3002 \u5728Schema\u91cc\u89c4\u5b9a\u4e0d\u53ef\u7f3a\u7701\u5b57\u6bb5\uff1a\u8bbe\u7f6e\u53c2\u6570required=True","title":"6\u3001Validation(\u9a8c\u8bc1)"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#61","text":"\u5728\u7f16\u5199Schema\u7c7b\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u5411\u5185\u5efa\u7684fields\u4e2d\u8bbe\u7f6evalidate\u53c2\u6570\u7684\u503c\u6765\u5b9a\u5236\u9a8c\u8bc1\u7684\u903b\u8f91, validate\u7684\u503c\u53ef\u4ee5\u662f\u51fd\u6570, \u533f\u540d\u51fd\u6570lambda, \u6216\u8005\u662f\u5b9a\u4e49\u4e86**call**\u7684\u5bf9\u8c61\u3002 from marshmallow import Schema , fields , ValidationError class UserSchema ( Schema ): name = fields . String ( required = True , validate = lambda s : len ( s ) < 6 ) email = fields . Email () created_time = fields . DateTime () user_data = { \"name\" : \"InvalidName\" , \"email\" : \"2432783449@qq.com\" } try : res = UserSchema () . load ( user_data ) except ValidationError as e : print ( e . messages ) \u5728\u9a8c\u8bc1\u51fd\u6570\u4e2d\u81ea\u5b9a\u4e49\u5f02\u5e38\u4fe1\u606f\uff1a #encoding=utf-8 from marshmallow import Schema , fields , ValidationError def validate_name ( name ): if len ( name ) <= 2 : raise ValidationError ( \"name\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e2\u4f4d\" ) if len ( name ) >= 6 : raise ValidationError ( \"name\u957f\u5ea6\u4e0d\u80fd\u5927\u4e8e6\u4f4d\" ) class UserSchema ( Schema ): name = fields . String ( required = True , validate = validate_name ) email = fields . Email () created_time = fields . DateTime () user_data = { \"name\" : \"InvalidName\" , \"email\" : \"2432783449@qq.com\" } try : res = UserSchema () . load ( user_data ) except ValidationError as e : print ( e . messages ) \u6ce8\u610f \uff1a\u53ea\u4f1a\u5728\u53cd\u5e8f\u5217\u5316\u7684\u65f6\u5019\u53d1\u751f\u9a8c\u8bc1\uff01\u5e8f\u5217\u5316\u7684\u65f6\u5019\u4e0d\u4f1a\u9a8c\u8bc1\uff01","title":"6.1 \u81ea\u5b9a\u4e49\u9a8c\u8bc1\u4fe1\u606f"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#62-schema","text":"\u5728Schema\u4e2d\uff0c\u4f7f\u7528validates\u88c5\u9970\u5668\u5c31\u53ef\u4ee5\u6ce8\u518c\u9a8c\u8bc1\u65b9\u6cd5\u3002 #encoding=utf-8 from marshmallow import Schema , fields , ValidationError , validates class UserSchema ( Schema ): name = fields . String ( required = True ) email = fields . Email () created_time = fields . DateTime () @validates ( \"name\" ) def validate_name ( self , value ): if len ( value ) <= 2 : raise ValidationError ( \"name\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e2\u4f4d\" ) if len ( value ) >= 6 : raise ValidationError ( \"name\u957f\u5ea6\u4e0d\u80fd\u5927\u4e8e6\u4f4d\" ) user_data = { \"name\" : \"InvalidName\" , \"email\" : \"2432783449@qq.com\" } try : res = UserSchema () . load ( user_data ) except ValidationError as e : print ( e . messages )","title":"6.2 \u5c06\u9a8c\u8bc1\u51fd\u6570\u5199\u5728Schema\u4e2d\u53d8\u6210\u9a8c\u8bc1\u65b9\u6cd5"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#63-required-fields","text":"\u4e0a\u9762\u5df2\u7ecf\u7b80\u5355\u4f7f\u7528\u8fc7required\u53c2\u6570\u4e86\u3002\u8fd9\u91cc\u518d\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u3002 \u81ea\u5b9a\u4e49required\u5f02\u5e38\u4fe1\u606f\uff1a \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5728requird=True\u65f6\u7f3a\u5931\u5b57\u6bb5\u65f6\u629b\u51fa\u7684\u5f02\u5e38\u4fe1\u606f\uff1a\u8bbe\u7f6e\u53c2\u6570error_messages\u7684\u503c #encoding=utf-8 from marshmallow import Schema , fields , ValidationError , validates class UserSchema ( Schema ): name = fields . String ( required = True , error_messages = { \"required\" : \"name\u5b57\u6bb5\u5fc5\u987b\u7684\" }) email = fields . Email () created_time = fields . DateTime () @validates ( \"name\" ) def validate_name ( self , value ): if len ( value ) <= 2 : raise ValidationError ( \"name\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e2\u4f4d\" ) if len ( value ) >= 6 : raise ValidationError ( \"name\u957f\u5ea6\u4e0d\u80fd\u5927\u4e8e6\u4f4d\" ) user_data = { \"email\" : \"2432783449@qq.com\" } try : res = UserSchema () . load ( user_data ) except ValidationError as e : print ( e . messages ) Partial Loading\u5ffd\u7565\u9a8c\u8bc1\uff1a \u4f7f\u7528required\u4e4b\u540e\u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u5728\u4f20\u5165\u6570\u636e\u7684\u65f6\u5019\u5ffd\u7565\u8fd9\u4e2a\u5fc5\u586b\u5b57\u6bb5\u3002 # encoding = utf - 8 from marshmallow import Schema , fields , ValidationError , validates class UserSchema ( Schema ): name = fields . String ( required = True ) age = fields . Integer ( required = True ) # \u65b9\u6cd5\u4e00 \uff1a \u5728load () \u65b9\u6cd5\u8bbe\u7f6epartial\u53c2\u6570\u7684\u503c ( \u5143\u7ec4 ) \uff0c \u8868\u65f6\u5ffd\u7565\u90a3\u4e9b\u5b57\u6bb5 \u3002 schema = UserSchema () res = schema . load ({ \"age\" : 42 }, partial = ( \"name\" ,)) print ( res ) # { ' age ' : 42 } # \u65b9\u6cd5\u4e8c \uff1a \u76f4\u63a5\u8bbe\u7f6epartial = True schema = UserSchema () res = schema . load ({ \"age\" : 42 }, partial = True ) print ( res ) # { ' age ' : 42 } \u770b\u8d77\u6765\u4e24\u79cd\u65b9\u6cd5\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u65b9\u6cd5\u4e00\u548c\u65b9\u6cd5\u4e8c\u6709\u533a\u522b\uff1a\u65b9\u6cd5\u4e00\u53ea\u5ffd\u7565\u4f20\u5165partial\u7684\u5b57\u6bb5\uff0c\u65b9\u6cd5\u4e8c\u4f1a\u5ffd\u7565\u9664\u524d\u9762\u4f20\u5165\u7684\u6570\u636e\u91cc\u5df2\u6709\u7684\u5b57\u6bb5\u4e4b\u5916\u7684\u6240\u6709\u5b57\u6bb5","title":"6.3 Required Fields(\u5fc5\u586b\u9009\u9879)"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#64","text":"load_default \u6307\u5b9a\u9ed8\u8ba4\u7684\u53cd\u5e8f\u5217\u5316\u503c dump_default \u6307\u5b9a\u9ed8\u8ba4\u7684\u5e8f\u5217\u5316\u503c class UserSchema ( Schema ): id = fields . UUID ( load_default = uuid . uuid1 ) birthdate = fields . DateTime ( dump_default = dt . datetime ( 2017 , 9 , 29 )) UserSchema () . load ({}) # {'id': UUID('337d946c-32cd-11e8-b475-0022192ed31b')} UserSchema () . dump ({}) # {'birthdate': '2017-09-29T00:00:00+00:00'}","title":"6.4 \u6307\u5b9a\u9ed8\u8ba4\u503c"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#65","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f20\u5165\u4e86\u672a\u77e5\u7684\u5b57\u6bb5(Schema\u91cc\u6ca1\u6709\u7684\u5b57\u6bb5)\uff0c\u6267\u884cload()\u65b9\u6cd5\u4f1a\u629b\u51fa\u4e00\u4e2a ValidationError \u5f02\u5e38\u3002\u8fd9\u79cd\u884c\u4e3a\u53ef\u4ee5\u901a\u8fc7\u66f4\u6539 unknown \u9009\u9879\u6765\u4fee\u6539\u3002 unknown \u6709\u4e09\u4e2a\u503c\uff1a EXCLUDE: exclude unknown fields(\u76f4\u63a5\u6254\u6389\u672a\u77e5\u5b57\u6bb5) INCLUDE: accept and include the unknown fields(\u63a5\u53d7\u672a\u77e5\u5b57\u6bb5) RAISE: raise a ValidationError if there are any unknown fields(\u629b\u51fa\u5f02\u5e38) \u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u9ed8\u8ba4\u7684\u884c\u4e3a\u5c31\u662fRAISE\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u53bb\u66f4\u6539\uff1a \u65b9\u6cd5\u4e00\uff1a\u5728\u7f16\u5199Schema\u7c7b\u7684\u65f6\u5019\u5728class Meta\u91cc\u4fee\u6539 from marshmallow import EXCLUDE , Schema , fields class UserSchema ( Schema ): name = fields . String ( required = True , error_messages = { \"required\" : \"name\u5b57\u6bb5\u5fc5\u987b\u586b\u5199\" }) email = fields . Email () created_time = fields . DateTime () class Meta : unknown = EXCLUDE \u65b9\u6cd5\u4e8c\uff1a\u5728\u5b9e\u4f8b\u5316Schema\u7c7b\u7684\u65f6\u5019\u8bbe\u7f6e\u53c2\u6570unknown\u7684\u503c class UserSchema ( Schema ): name = fields . Str ( required = True , error_messages = { \"required\" : \"name\u5b57\u6bb5\u5fc5\u987b\u586b\u5199\" }) email = fields . Email () created_time = fields . DateTime () shema = UserSchema ( unknown = EXCLUDE )","title":"6.5 \u5bf9\u672a\u77e5\u5b57\u6bb5\u7684\u5904\u7406"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#7schemavalidate","text":"\u5982\u679c\u53ea\u662f\u60f3\u7528Schema\u53bb\u9a8c\u8bc1\u6570\u636e, \u800c\u4e0d\u8fdb\u884c\u53cd\u5e8f\u5217\u5316\u751f\u6210\u5bf9\u8c61, \u53ef\u4ee5\u4f7f\u7528Schema.validate() \u53ef\u4ee5\u770b\u5230, \u901a\u8fc7schema.validate()\u4f1a\u81ea\u52a8\u5bf9\u6570\u636e\u8fdb\u884c\u6821\u9a8c, \u5982\u679c\u6709\u9519\u8bef, \u5219\u4f1a\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\u7684dict,\u6ca1\u6709\u9519\u8bef\u5219\u8fd4\u56de\u7a7a\u7684dict\uff0c\u901a\u8fc7\u8fd4\u56de\u7684\u6570\u636e, \u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u8ba4\u9a8c\u8bc1\u662f\u5426\u901a\u8fc7. #encoding=utf-8 from marshmallow import Schema , fields , ValidationError class UserSchema ( Schema ): name = fields . Str ( required = True , error_messages = { \"required\" : \"name\u5b57\u6bb5\u5fc5\u987b\u586b\u5199\" }) email = fields . Email () created_time = fields . DateTime () user = { \"name\" : \"lhh\" , \"email\" : \"2432783449\" } schema = UserSchema () res = schema . validate ( user ) print ( res ) # {'email': ['Not a valid email address.']} user = { \"name\" : \"lhh\" , \"email\" : \"2432783449@qq.com\" } schema = UserSchema () res = schema . validate ( user ) print ( res ) # {}","title":"7\u3001Schema.validate(\u6821\u9a8c\u6570\u636e)"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#8-specifying-serializationdeserialization-keys","text":"","title":"8. Specifying Serialization/Deserialization Keys(\u6307\u5b9a\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u952e)"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#81-specifying-attribute-namesobjectfields","text":"Schema\u9ed8\u8ba4\u4f1a\u5e8f\u5217\u5316\u4f20\u5165\u5bf9\u8c61\u548c\u81ea\u8eab\u5b9a\u4e49\u7684fields\u76f8\u540c\u7684\u5c5e\u6027, \u7136\u800c\u4f60\u4e5f\u4f1a\u6709\u9700\u6c42\u4f7f\u7528\u4e0d\u540c\u7684fields\u548c\u5c5e\u6027\u540d. \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u4f60\u9700\u8981\u660e\u786e\u5b9a\u4e49\u8fd9\u4e2afields\u5c06\u4ece\u4ec0\u4e48\u5c5e\u6027\u540d\u53d6\u503c from marshmallow import fields , Schema , ValidationError import datetime as dt class User : def __init__ ( self , name , email ): self . name = name self . email = email self . created_time = dt . datetime . now () class UserSchema ( Schema ): full_name = fields . String ( attribute = \"name\" ) email_address = fields . Email ( attribute = \"email\" ) created_at = fields . DateTime ( attribute = \"created_time\" ) user = User ( \"lhh\" , email = \"2432783449@qq.com\" ) schema = UserSchema () res = schema . dump ( user ) print ( res ) # {'email_address': '2432783449@qq.com', 'full_name': 'lhh', 'created_at': '2021-05-29T09:24:38.186191'} \u5982\u4e0a\u6240\u793a\uff1aUserSchema\u4e2d\u7684full_name\uff0cemail_address\uff0ccreated_at\u5206\u522b\u4eceUser\u5bf9\u8c61\u7684name\uff0cemail\uff0ccreated_time\u5c5e\u6027\u53d6\u503c\u3002","title":"8.1 Specifying Attribute Names(\u5e8f\u5217\u5316\u65f6\u6307\u5b9aobject\u5c5e\u6027\u5bf9\u5e94fields\u5b57\u6bb5)"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#82-fieldsobject","text":"\u8fd9\u4e2a\u4e0e\u4e0a\u9762\u76f8\u53cd\uff0cSchema\u9ed8\u8ba4\u53cd\u5e8f\u5217\u5316\u4f20\u5165\u5b57\u5178\u548c\u8f93\u51fa\u5b57\u5178\u4e2d\u76f8\u540c\u7684\u5b57\u6bb5\u540d. \u5982\u679c\u4f60\u89c9\u5f97\u6570\u636e\u4e0d\u5339\u914d\u4f60\u7684schema, \u53ef\u4ee5\u4f20\u5165load_from\u53c2\u6570\u6307\u5b9a\u9700\u8981\u589e\u52a0load\u7684\u5b57\u6bb5\u540d(\u539f\u5b57\u6bb5\u540d\u4e5f\u80fdload, \u4e14\u4f18\u5148load\u539f\u5b57\u6bb5\u540d) from marshmallow import fields , Schema , ValidationError import datetime as dt class UserSchema ( Schema ): full_name = fields . String ( load_from = \"name\" ) email_address = fields . Email ( load_from = \"email\" ) created_at = fields . DateTime ( load_from = \"created_time\" ) user = { \"full_name\" : \"lhh\" , \"email_address\" : \"2432783449@qq.com\" } schema = UserSchema () res = schema . load ( user ) print ( res ) # {'full_name': 'lhh', 'email_address': '2432783449@qq.com'}","title":"8.2 \u53cd\u5e8f\u5217\u5316\u65f6\u6307\u5b9afields\u5b57\u6bb5\u5bf9\u5e94object\u5c5e\u6027"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#83-key","text":"#encoding=utf-8 from marshmallow import fields , ValidationError , Schema class UserSchema ( Schema ): full_name = fields . String ( data_key = \"name\" ) email_address = fields . Email ( data_key = \"email\" ) created_at = fields . DateTime ( data_key = \"created_time\" ) # \u5e8f\u5217\u5316 user = { \"full_name\" : \"lhh\" , \"email_address\" : \"2432783449@qq.com\" } schema = UserSchema () res = schema . dump ( user ) print ( res ) # {'name': 'lhh', 'email': '2432783449@qq.com'} # \u53cd\u5e8f\u5217\u5316 user = { 'name' : 'lhh' , 'email' : '2432783449@qq.com' } schema = UserSchema () res = schema . load ( user ) print ( res ) # {'full_name': 'lhh', 'email_address': '2432783449@qq.com'}","title":"8.3 \u8ba9key\u540c\u65f6\u6ee1\u8db3\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316\u7684\u65b9\u6cd5"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#9","text":"\u5f53Schema\u5177\u6709\u8bb8\u591a\u5c5e\u6027\u65f6\uff0c\u4e3a\u6bcf\u4e2a\u5c5e\u6027\u6307\u5b9a\u5b57\u6bb5\u7c7b\u578b\u53ef\u80fd\u4f1a\u91cd\u590d\uff0c\u7279\u522b\u662f\u5f53\u8bb8\u591a\u5c5e\u6027\u5df2\u7ecf\u662f\u672c\u5730python\u7684\u6570\u636e\u7c7b\u578b\u65f6\u3002class Meta\u5141\u8bb8\u6307\u5b9a\u8981\u5e8f\u5217\u5316\u7684\u5c5e\u6027\uff0cmarshmallow\u5c06\u6839\u636e\u5c5e\u6027\u7684\u7c7b\u578b\u9009\u62e9\u9002\u5f53\u7684\u5b57\u6bb5\u7c7b\u578b\u3002 # \u91cd\u6784Schema class UserSchema ( Schema ): uppername = fields . Function ( lambda obj : obj . name . upper ()) class Meta : fields = ( \"name\" , \"email\" , \"created_at\" , \"uppername\" ) \u4ee5\u4e0a\u4ee3\u7801\u4e2d\uff0c name\u5c06\u81ea\u52a8\u88ab\u683c\u5f0f\u5316\u4e3aString\u7c7b\u578b\uff0ccreated_at\u5c06\u88ab\u683c\u5f0f\u5316\u4e3aDateTime\u7c7b\u578b\u3002 \u5982\u679c\u60a8\u5e0c\u671b\u6307\u5b9a\u9664\u4e86\u663e\u5f0f\u58f0\u660e\u7684\u5b57\u6bb5\u4e4b\u5916\u8fd8\u5305\u62ec\u54ea\u4e9b\u5b57\u6bb5\u540d\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u9644\u52a0\u9009\u9879\u3002\u5982\u4e0b\uff1a class UserSchema ( Schema ): uppername = fields . Function ( lambda obj : obj . name . upper ()) class Meta : # No need to include 'uppername' additional = ( \"name\" , \"email\" , \"created_at\" )","title":"9. \u91cd\u6784\uff1a\u521b\u5efa\u9690\u5f0f\u5b57\u6bb5"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#10","text":"\u5bf9\u4e8e\u67d0\u4e9b\u7528\u4f8b\uff0c\u7ef4\u62a4\u5e8f\u5217\u5316\u8f93\u51fa\u7684\u5b57\u6bb5\u987a\u5e8f\u53ef\u80fd\u5f88\u6709\u7528\u3002\u8981\u542f\u7528\u6392\u5e8f\uff0c\u8bf7\u5c06ordered\u9009\u9879\u8bbe\u7f6e\u4e3atrue\u3002\u8fd9\u5c06\u6307\u793amarshmallow\u5c06\u6570\u636e\u5e8f\u5217\u5316\u5230 collections.OrderedDict from collections import OrderedDict import datetime as dt from marshmallow import fields , ValidationError , Schema class User : def __init__ ( self , name , email ): self . name = name self . email = email self . created_time = dt . datetime . now () class UserSchema ( Schema ): uppername = fields . Function ( lambda obj : obj . name . upper ()) class Meta : fields = ( \"name\" , \"email\" , \"created_time\" , \"uppername\" ) ordered = True user = User ( \"lhh\" , \"2432783449@qq.com\" ) schema = UserSchema () res = schema . dump ( user ) print ( isinstance ( res , OrderedDict )) # \u5224\u65ad\u53d8\u91cf\u7c7b\u578b # True print ( res ) # OrderedDict([('name', 'lhh'), ('email', '2432783449@qq.com'), ('created_time', '2021-05-29T09:40:46.351382'), ('uppername', 'LHH')])","title":"10. \u6392\u5e8f"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#11","text":"\u5728Web API\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5e8f\u5217\u5316\u53c2\u6570dump_only\u548c\u53cd\u5e8f\u5217\u5316\u53c2\u6570load_only\u5728\u6982\u5ff5\u4e0a\u5206\u522b\u7b49\u540c\u4e8e\u53ea\u8bfb\u548c\u53ea\u5199\u5b57\u6bb5\u3002 from marshmallow import Schema , fields class UserSchema ( Schema ): name = fields . Str () password = fields . Str ( load_only = True ) # \u7b49\u4e8e\u53ea\u5199 created_at = fields . DateTime ( dump_only = True ) # \u7b49\u4e8e\u53ea\u8bfb load\u65f6\uff0cdump_only\u5b57\u6bb5\u88ab\u89c6\u4e3a\u672a\u77e5\u5b57\u6bb5\u3002\u5982\u679cunknown\u9009\u9879\u8bbe\u7f6e\u4e3ainclude\uff0c\u5219\u4e0e\u8fd9\u4e9b\u5b57\u6bb5\u5bf9\u5e94\u7684\u952e\u7684\u503c\u5c06\u56e0\u6b64loaded\u800c\u4e0d\u8fdb\u884c\u9a8c\u8bc1\u3002","title":"11. \u201c\u53ea\u8bfb\u201d\u4e0e\u201c\u53ea\u5199\u201d\u5b57\u6bb5"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#12","text":"\u5e8f\u5217\u5316\u65f6\u8f93\u5165\u503c\u7f3a\u5931\u7528default\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002\u53cd\u5e8f\u5217\u5316\u65f6\u8f93\u5165\u503c\u7f3a\u5931\u7528missing\u6307\u5b9a\u9ed8\u8ba4\u503c\u3002 #encoding=utf-8 import uuid import datetime as dt from marshmallow import fields , ValidationError , Schema class UserSchema ( Schema ): id = fields . UUID ( missing = uuid . uuid1 ) birthday = fields . DateTime ( default = dt . datetime ( 1996 , 11 , 17 )) # \u5e8f\u5217\u5316 res = UserSchema () . dump ({}) print ( res ) # {'birthday': '1996-11-17T00:00:00'} # \u53cd\u5e8f\u5217\u5316 res = UserSchema () . load ({ 'birthday' : '1996-11-17T00:00:00' }) print ( res ) # {'id': UUID('751d95db-c020-11eb-83eb-001a7dda7115'), 'birthday': datetime.datetime(1996, 11, 17, 0, 0)}","title":"12. \u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u65f6\u6307\u5b9a\u5b57\u6bb5\u7684\u9ed8\u8ba4\u503c"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#13","text":"from marshmallow import Schema , fields class String128 ( fields . String ): \"\"\" \u957f\u5ea6\u4e3a128\u7684\u5b57\u7b26\u4e32\u7c7b\u578b \"\"\" default_error_messages = { \"type\" : \"\u8be5\u5b57\u6bb5\u53ea\u80fd\u662f\u5b57\u7b26\u4e32\u7c7b\u578b\" , \"invalid\" : \"\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e6\" , } def _deserialize ( self , value , attr , data , ** kwargs ): if not isinstance ( value , str ): self . fail ( \"type\" ) if len ( value ) < 6 : self . fail ( \"invalid\" ) class AppSchema ( Schema ): name = String128 ( required = True ) priority = fields . Integer () obj_type = String128 () link = String128 () deploy = fields . Dict () description = fields . String () projects = fields . List ( cls_or_instance = fields . Dict ) app = { \"name\" : \"app11\" , \"priority\" : 2 , \"obj_type\" : \"web\" , \"link\" : \"123.123.00.2\" , \"deploy\" : { \"deploy1\" : \"deploy1\" , \"deploy2\" : \"deploy2\" }, \"description\" : \"app111 test111\" , \"projects\" : [{ \"id\" : 2 }] } schema = AppSchema () res = schema . validate ( app ) print ( res ) # {'obj_type': ['\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e6'], 'name': ['\u8be5\u5b57\u7b26\u4e32\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e6']} marshmallow: simplified object serialization \u2014 marshmallow 3.15.0 documentation","title":"13. \u540e\u7eed\u6269\u5c55"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#webargs","text":"webargs \u662f\u7528\u6765\u53c2\u6570\u89e3\u6790\u548c\u6821\u9a8c\u53c2\u6570\u7684\u5de5\u5177\u3002","title":"webargs"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_6","text":"from flask import Flask from webargs import fields from webargs.flaskparser import use_args app = Flask ( __name__ ) @app . route ( \"/\" ) @use_args ({ \"name\" : fields . Str ( required = True )}, location = \"query\" ) def index ( args ): return \"Hello \" + args [ \"name\" ] if __name__ == \"__main__\" : app . run () # curl http://localhost:5000/\\?name\\='World' # Hello World \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c webargs \u4f1a\u81ea\u52a8\u89e3\u6790 json body \u6570\u636e\u3002\u4f46\u662f\u4e5f\u652f\u6301\u5176\u4ed6\u7c7b\u578b\u3002\u9700\u8981\u624b\u52a8\u6307\u5b9a\u6570\u636e\u6765\u6e90\uff0c\u8bbe\u7f6e\u65b9\u5f0f\u4e3a location=xxx (\"form\", \"query\",\"json\",\"headers\", \"cookies\", \"files\", \"paths\") \u66f4\u591a\u4f7f\u7528\u65b9\u5f0f\u53ca\u529f\u80fd\u652f\u6301\u53ef\u53c2\u89c1\u5b98\u65b9\u6587\u6863\uff1a webargs 8.1.0 documentation","title":"\u4f7f\u7528\u793a\u4f8b"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#flask-apispec","text":"flask-apispec \u662f\u4e00\u6b3e\u8f7b\u91cf\u7ea7\u80fd\u81ea\u52a8\u751f\u6210 REST APIs \u7684 Flask \u5de5\u5177\u3002\u4f7f\u7528\u4e86 webargs \u505a request \u89e3\u6790\uff0c marshmallow \u505a response \u683c\u5f0f\u5316\uff0c\u548c apispec \u81ea\u52a8\u751f\u6210 Swagger \u3002","title":"flask-apispec"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_7","text":"pip install flask - apispec","title":"\u4e0b\u8f7d\u5b89\u88c5"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_8","text":"from flask import Flask from flask_apispec import use_kwargs , marshal_with from marshmallow import Schema from webargs import fields from .models import Pet app = Flask ( __name__ ) class PetSchema ( Schema ): class Meta : fields = ( 'name' , 'category' , 'size' ) @app . route ( '/pets' ) @use_kwargs ({ 'category' : fields . Str (), 'size' : fields . Str ()}) @marshal_with ( PetSchema ( many = True )) def get_pets ( ** kwargs ): return Pet . query . filter_by ( ** kwargs )","title":"\u4f7f\u7528\u5b9e\u4f8b"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_9","text":"# apps/__init__.py def register_apispec ( app ): from apispec import APISpec from apispec.ext.marshmallow import MarshmallowPlugin from util.flask_apispec import FlaskPlugin , FlaskApiSpec from webargs.flaskparser import FlaskParser from marshmallow import EXCLUDE # \u8bbe\u7f6ejson\u53c2\u6570\u6821\u9a8c\u65f6\u672a\u77e5\u53c2\u6570\u5904\u7406\u65b9\u5f0f\u4e3a\u4e22\u5f03\u672a\u77e5\u5b57\u6bb5 class Parser ( FlaskParser ): DEFAULT_UNKNOWN_BY_LOCATION = { \"json\" : EXCLUDE } app . config . update ({ 'APISPEC_SPEC' : APISpec ( title = \"POROS\" , version = \"1.0.0\" , openapi_version = \"2.0\" , info = dict ( description = \"POROS API\" ), plugins = [ FlaskPlugin (), MarshmallowPlugin ()], ), 'APISPEC_FORMAT_RESPONSE' : None , 'APISPEC_WEBARGS_PARSER' : Parser (), # \u542f\u7528\u6307\u5b9a\u89e3\u6790\u5668 }) docs = FlaskApiSpec ( app , document_options = False ) docs . register_existing_resources () \u5b98\u65b9\u6587\u6863: flask-apispec: Auto-documenting REST APIs for Flask \u2014 flask-apispec 0.7.0 documentation \u6e90\u7801\uff1a jmcarp/flask-apispec (github.com)","title":"\u9879\u76ee\u4e2d\u4f7f\u7528\u5b9e\u4f8b"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#mongoengine","text":"MongoEngine \u662f\u4e00\u4e2a\u57fa\u4e8e pymongo \u5f00\u53d1\u7684 ODM \u5e93\uff0c\u5bf9\u5e94\u4e0e SQLAlchemy \u3002\u540c\u65f6\uff0c\u5728 MongoEngine \u57fa\u7840\u4e0a\u5c01\u88c5\u4e86 Flask-MongoEngine \uff0c\u7528\u4e8e\u652f\u6301 flask \u6846\u67b6\u3002","title":"mongoengine"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#1","text":"","title":"1 \u8fde\u63a5\u6570\u636e\u5e93"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#11_1","text":"from mongoengine import connect # \u65b9\u6cd5\u4e00\uff1a\u672c\u5730\u8fde\u63a5 connect ( 'dbname' , alias = '\u522b\u540d' ) # \u65b9\u6cd5\u4e8c\uff1a\u8fdc\u7a0b\u8fde\u63a5 connect ( 'dbname' , host = '\u8fdc\u7a0b\u8fde\u63a5\u5730\u5740' , post = \u7aef\u53e3\u53f7 ) # \u65b9\u6cd5\u4e09\uff1a\u8fde\u63a5\u5e26\u6709\u9a8c\u8bc1\u7684\u8fdc\u7a0b\u6570\u636e\u5e93 connect ( 'dbname' , username = '\u7528\u6237\u540d' , password = '\u5bc6\u7801' , authentication_source = 'admin' , host = '\u8fdc\u7a0b\u670d\u52a1\u5668IP\u5730\u5740' , post = \u5f00\u653e\u7684\u7aef\u53e3\u53f7 ))","title":"1.1 \u591a\u79cd\u8fde\u63a5\u65b9\u5f0f"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#12_1","text":"\u8981\u4f7f\u7528\u591a\u4e2a\u6570\u636e\u5e93\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528connect()\u5e76\u4e3a\u8fde\u63a5\u63d0\u4f9b\u522b\u540d(alisa)\uff0c\u9ed8\u8ba4\u4f7f\u7528\u201cdefault\u201d\u3002 \u5728\u540e\u53f0\uff0c\u8fd9\u7528\u4e8eregister_connection()\u5b58\u50a8\u6570\u636e\uff0c\u5982\u679c\u9700\u8981\uff0c\u60a8\u53ef\u4ee5\u9884\u5148\u6ce8\u518c\u6240\u6709\u522b\u540d\u3002 \u5728\u4e0d\u540c\u6570\u636e\u5e93\u4e2d\u5b9a\u4e49\u6587\u6863 \u901a\u8fc7\u5728\u5143\u6570\u636e\u4e2d\u63d0\u4f9bdb_alias\uff0c\u53ef\u4ee5\u5c06\u5404\u4e2a\u6587\u6863\u9644\u52a0\u5230\u4e0d\u540c\u7684\u6570\u636e\u5e93 \u3002\u8fd9\u5141\u8bb8DBRef \u5bf9\u8c61\u6307\u5411\u6570\u636e\u5e93\u548c\u96c6\u5408\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u793a\u4f8b\u6a21\u5f0f\uff0c\u4f7f\u75283\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u5e93\u6765\u5b58\u50a8\u6570\u636e # \u9ed8\u8ba4\u672c\u5730\u8fde\u63a5 connect ( alias = 'user-db-alias' \uff0c db = 'user-db' ) connect ( alias = 'book-db-alias' \uff0c db = 'book-db' ) connect ( alias = 'users-books-db -alias' \uff0c db = 'users-books-db' ) class User ( Document ) \uff1a name = StringField () meta = { 'db_alias' \uff1a 'user-db-alias' } # \u6307\u5b9a\u6570\u636e\u5bf9\u5e94\u7684\u6570\u636e\u5e93 class Book ( Document ) \uff1a name = StringField () meta = { 'db_alias' \uff1a 'book-db-alias' } class AuthorBooks ( Document ) \uff1a author = ReferenceField ( User ) book = ReferenceField ( Book ) meta = { 'db_alias' \uff1a ' users-books-db-alias' } \u65ad\u5f00\u73b0\u6709\u8fde\u63a5 disconnect \u53ef\u7528\u4e8e\u65ad\u5f00\u7279\u5b9a\u8fde\u63a5\u3002 from mongoengine import connect , disconnect connect ( 'a_db' , alias = 'db1' ) # ==\u300b \u5efa\u7acb\u522b\u540d\u4e3a\u201cdb1\u201d\u7684\u8fde\u63a5 class User ( Document ): name = StringField () meta = { 'db_alias' : 'db1' } disconnect ( alias = 'db1' ) # ==\u300b \u65ad\u5f00 \u522b\u540d\u4e3a\u201cdb1\u201d\u7684\u8fde\u63a5 connect ( 'another_db' , alias = 'db1' ) # ==\u300b \u7531\u4e8e\u4e0a\u4e00\u6b65\u65ad\u5f00\u4e86\u522b\u540d\u4e3adb1\u7684\u8fde\u63a5\uff0c\u73b0\u5728\u8fde\u63a5\u5176\u5b83\u6570\u636e\u5e93\u65f6\u53c8\u53ef\u4ee5\u4f7f\u7528\u522b\u540d\u201cdb1\u201d\u4f5c\u4e3a\u8fde\u63a5\u540d","title":"1.2 \u8fde\u63a5\u591a\u4e2a\u6570\u636e\u5e93"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#13_1","text":"\u6709\u65f6\u60a8\u53ef\u80fd\u5e0c\u671b\u5207\u6362\u6570\u636e\u5e93\u6216\u96c6\u5408\u4ee5\u8fdb\u884c\u67e5\u8be2 \u5207\u6362\u6570\u636e\u5e93 switch_db \u4e0a\u5141\u8bb8\u66f4\u6539\u6570\u636e\u5e93\u522b\u540d\u7ed9\u5b9a\u7c7b\uff0c\u5141\u8bb8\u5feb\u901f\u548c\u65b9\u4fbf\u5730\u8de8\u6570\u636e\u5e93\u8bbf\u95ee\uff1a \u5207\u6362\u6570\u636e\u5e93\uff0c\u5fc5\u987b\u9884\u5148\u6ce8\u518c\u522b\u540d(\u4f7f\u7528\u5df2\u6ce8\u518c\u7684\u522b\u540d) from mongoengine.context_managers import switch_db class User ( Document ): name = StringField () meta = { 'db_alias' : 'user-db' } with switch_db ( User , 'archive-user-db' ) as User : User ( name = 'Ross' ) . save () # ===\u300b \u8fd9\u65f6\u4f1a\u5c06\u6570\u636e\u4fdd\u5b58\u81f3 'archive-user-db' \u5207\u6362\u6587\u6863 switch_collection() \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5141\u8bb8\u66f4\u6539\u96c6\u5408\uff0c\u5141\u8bb8\u5feb\u901f\u548c\u65b9\u4fbf\u5730\u8de8\u96c6\u5408\u8bbf\u95ee\uff1a from mongoengine.context_managers import switch_collection class Group ( Document ): name = StringField () Group ( name = 'test' ) . save () # \u4fdd\u5b58\u81f3\u9ed8\u8ba4\u6570\u636e\u5e93 with switch_collection ( Group , 'group2000' ) as Group : Group ( name = 'hello Group 2000 collection!' ) . save () # \u5c06\u6570\u636e\u4fdd\u5b58\u81f3 group2000 \u96c6\u5408","title":"1.3 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#2","text":"","title":"2 \u5b9a\u4e49\u6587\u6863"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#21-document","text":"MongoEngine \u5141\u8bb8\u4e3a\u6587\u6863\u5b9a\u4e49\u6a21\u5f0f\uff0c\u56e0\u4e3a\u8fd9\u6709\u52a9\u4e8e\u51cf\u5c11\u7f16\u7801\u9519\u8bef\uff0c\u5e76\u5141\u8bb8\u5728\u53ef\u80fd\u5b58\u5728\u7684\u5b57\u6bb5\u4e0a\u5b9a\u4e49\u65b9\u6cd5\u3002 \u4e3a\u6587\u6863\u5b9a\u4e49\u6a21\u5f0f\uff0c\u9700\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f\u81ea Document \u7684\u7c7b\uff0c\u5c06\u5b57\u6bb5\u5bf9\u8c61\u4f5c\u4e3a\u7c7b\u5c5e\u6027\u6dfb\u52a0\u5230\u6587\u6863\u7c7b\uff1a from mongoengine import * import datetime class Page ( Document ): title = StringField ( max_length = 200 , required = True ) # ===\u300b \u521b\u5efa\u4e00\u4e2aString\u578b\u7684\u5b57\u6bb5title\uff0c\u6700\u5927\u957f\u5ea6\u4e3a200\u5b57\u8282\u4e14\u4e3a\u5fc5\u586b\u9879 date_modified = DateTimeField ( default = datetime . datetime . utcnow ) # ===\u300b \u521b\u5efa\u4e00\u4e2a\u65f6\u95f4\u7c7b\u578b\u7684\u5b57\u6bb5(utcnow\u662f\u4e16\u754c\u65f6\u95f4\uff0cnow\u662f\u672c\u5730\u8ba1\u7b97\u673a\u65f6\u95f4)","title":"2.1 \u5b9a\u4e49\u6587\u6863\u6a21\u578b(document)"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#22-dynamic-document","text":"\u52a8\u6001\u6587\u6863(Dynamic Document)\u8ddf\u975e\u52a8\u6001\u6587\u6863(document)\u7684\u533a\u522b\u662f\uff0c\u52a8\u6001\u6587\u6863\u53ef\u4ee5\u5728\u6a21\u578b\u57fa\u7840\u4e0a\u65b0\u589e\u5b57\u6bb5\uff0c\u4f46\u975e\u52a8\u6001\u6587\u6863\u4e0d\u5141\u8bb8\u65b0\u589e\u3002 \u52a8\u6001\u6587\u6863\u4e2d\u81ea\u5b9a\u4e49\u5b57\u6bb5\u4e0d\u80fd\u4ee5 _ \u5f00\u5934 from mongoengine import * class Page ( DynamicDocument ): title = StringField ( max_length = 200 , required = True ) # \u521b\u5efa\u4e00\u4e2apage\u5b9e\u4f8b\uff0c\u5e76\u65b0\u589etags\u5b57\u6bb5 >>> page = Page ( title = 'Using MongoEngine' ) >>> page . tags = [ 'mongodb' , 'mongoengine' ] >>> page . save () ===== \u300b # \u4e0d\u4f1a\u62a5\u9519\uff0c\u53ef\u4ee5\u88ab\u4fdd\u5b58\u81f3\u6570\u636e\u5e93 >>> Page . objects ( tags = 'mongoengine' ) . count () ===== \u300b # \u7edf\u8ba1 tags=\u2018mongengine\u2019\u7684\u6587\u6863\u6570 >>> 1","title":"2.2 \u5b9a\u4e49\u52a8\u6001\u6587\u6863\u6a21\u578b(Dynamic Document)"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#23-fields","text":"\u5b57\u6bb5\u7c7b\u578b\u5305\u542b\uff1a \u4ee5 \u300b \u5f00\u5934\u7684\u4e3a\u5e38\u7528\u7c7b\u578b \u300b BinaryField # \u4e8c\u8fdb\u5236\u5b57\u6bb5 \u300b BooleanField # \u5e03\u5c14\u578b\u5b57\u6bb5 \u300b DateTimeField # \u540e\u516d\u4f4d\u7cbe\u786e\u5230\u6beb\u5999\u7684\u65f6\u95f4\u7c7b\u578b\u5b57\u6bb5 ComplexDateTimeField # \u540e\u516d\u4f4d\u7cbe\u786e\u5230\u5fae\u5999\u7684\u65f6\u95f4\u7c7b\u578b\u5b57\u6bb5 DecimalField # \u300b DictField # \u5b57\u5178\u7c7b\u578b\u5b57\u6bb5 \u300b DynamicField # \u52a8\u6001\u7c7b\u578b\u5b57\u6bb5\uff0c\u80fd\u591f\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e \u300b EmailField # \u90ae\u4ef6\u7c7b\u578b\u5b57\u6bb5 \u300b EmbeddedDocumentField # \u5d4c\u5165\u5f0f\u6587\u6863\u7c7b\u578b \u300b StringField # \u5b57\u7b26\u4e32\u7c7b\u578b\u5b57\u6bb5 \u300b URLField # URL\u7c7b\u578b\u5b57\u6bb5 \u300b SequenceField # \u987a\u5e8f\u8ba1\u6570\u5668\u5b57\u6bb5\uff0c\u81ea\u589e\u957f \u300b ListField # \u5217\u8868\u7c7b\u578b\u5b57\u6bb5 \u300b ReferenceField # \u5f15\u7528\u7c7b\u578b\u5b57\u6bb5 LazyReferenceField \u300b IntField # \u6574\u6570\u7c7b\u578b\u5b57\u6bb5\uff0c\u5b58\u50a8\u5927\u5c0f\u4e3a32\u5b57\u8282 LongField # \u957f\u6574\u578b\u5b57\u6bb5\uff0c\u5b58\u50a8\u5927\u5c0f\u4e3a64\u5b57\u8282 EmbeddedDocumentListField FileField # \u5217\u8868\u7c7b\u578b\u5b57\u6bb5 FloatField # \u6d6e\u70b9\u6570\u7c7b\u578b\u5b57\u6bb5 GenericEmbeddedDocumentField GenericReferenceField GenericLazyReferenceField GeoPointField ImageField MapField ObjectIdField SortedListField UUIDField PointField LineStringField PolygonField MultiPointField MultiLineStringField MultiPolygonField \u5b57\u6bb5\u901a\u7528\u53c2\u6570 db_field \uff1a MongoDB \u5b57\u6bb5\u540d\u79f0 required : \u662f\u5426\u5fc5\u586b default : \u9ed8\u8ba4\u503c unique : \u662f\u5426\u552f\u4e00 unique_with :\u552f\u4e00\u5b57\u6bb5\u5217\u8868 primary_key : \u4e3b\u952e choices \uff1a\u9650\u5236\u8be5\u5b57\u6bb5\u7684\u503c(\u4e3a\u5217\u8868\u3001\u96c6\u5408\u6216\u5143\u7ec4\u4e2d\u7684\u4e00\u4e2a) validation \uff1a\u53ef\u7528\u4e8e\u9a8c\u8bc1\u5b57\u6bb5\u7684\u503c, callable\u5c06\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u5982\u679c\u9a8c\u8bc1\u5931\u8d25\uff0c\u5219\u5e94\u5f15\u53d1ValidationError def _not_empty ( val ): if not val : raise ValidationError ( 'value can not be empty' ) class Person ( Document ): name = StringField ( validation = _not_empty ) \u5217\u8868\u5b57\u6bb5(ListField) \u4f7f\u7528ListField\u5b57\u6bb5\u7c7b\u578b\u53ef\u4ee5\u5411 Document\u6dfb\u52a0\u9879\u76ee\u5217\u8868\u3002ListField\u5c06\u53e6\u4e00\u4e2a\u5b57\u6bb5\u5bf9\u8c61\u4f5c\u4e3a\u5176\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u8be5\u53c2\u6570\u6307\u5b9a\u53ef\u4ee5\u5728\u5217\u8868\u4e2d\u5b58\u50a8\u54ea\u4e9b\u7c7b\u578b\u5143\u7d20\uff1a class Page ( Document ) \uff1a tags = ListField ( StringField ( max_length = 50 )) # ===\u300b ListField\u4e2d\u5b58\u653e\u5b57\u7b26\u4e32\u5b57\u6bb5 # \u5e94\u8be5\u53ef\u4ee5\u5b58\u653e\u4efb\u610f\u7c7b\u578b\u5b57\u6bb5 \u5185\u5d4c\u6587\u6863(Embedded Document) MongoDB\u80fd\u591f\u5c06\u6587\u6863\u5d4c\u5165\u5230\u5176\u4ed6\u6587\u6863\u4e2d\u3002\u8981\u521b\u5efa\u5d4c\u5165\u5f0f\u6587\u6863\u6a21\u578b\uff0c\u9700\u8981\u7ee7\u627fEmbeddedDocument\uff1a # \u521b\u5efa\u5d4c\u5165\u5f0f\u6587\u6863\u6a21\u578b class Comment ( EmbeddedDocument ): content = StringField () # \u521b\u5efa\u6587\u6863\u6a21\u578b\uff0c\u4e14\u5c06 Comment \u5d4c\u5165Post.comments\u5217\u8868\u5b57\u6bb5\u4e2d class Page ( Document ): comments = ListField ( EmbeddedDocumentField ( Comment )) comment1 = Comment ( content = 'Good work!' ) comment2 = Comment ( content = 'Nice article!' ) page = Page ( comments = [ comment1 , comment2 ]) \u5b57\u5178\u5b57\u6bb5(Dictionary Fields) \u4e00\u822c\u5efa\u8bae\u4f7f\u7528\u5d4c\u5957\u6587\u6863\uff0c\u8fd9\u6837\u53ef\u4ee5\u9a8c\u8bc1\u6570\u636e\u7b49\u7b49\u3002\u4f46\u662f\uff0c\u5f53\u4f60\u4e0d\u77e5\u9053\u60f3\u8981\u5b58\u50a8\u4ec0\u4e48\u7ed3\u6784\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b57\u5178\u5b57\u6bb5\uff08\u5b57\u5178\u5b57\u6bb5\u4e0d\u652f\u6301\u9a8c\u8bc1\uff09\uff0c\u5b57\u5178\u53ef\u4ee5\u5b58\u50a8\u590d\u6742\u6570\u636e\uff0c\u5176\u4ed6\u5b57\u5178\uff0c\u5217\u8868\uff0c\u5bf9\u5176\u4ed6\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u662f\u6700\u7075\u6d3b\u7684\u5b57\u6bb5\u7c7b\u578b\uff1a class SurveyResponse ( Document ): date = DateTimeField () user = ReferenceField ( User ) answers = DictField () survey_response = SurveyResponse ( date = datetime . utcnow (), user = request . user ) response_form = ResponseForm ( request . POST ) survey_response . answers = response_form . cleaned_data () survey_response . save () \u66f4\u8fc7\u5b57\u6bb5\u7c7b\u578b\u53c2\u89c1\uff1a 2.3. Defining documents \u2014 MongoEngine 0.24.1 documentation","title":"2.3 \u5b57\u6bb5Fields"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#24-indexes","text":"\u4e3a\u4e86\u80fd\u5728\u6570\u636e\u5e93\u4e2d\u66f4\u5feb\u67e5\u627e\u6570\u636e\uff0c\u9700\u8981\u521b\u5efa\u7d22\u5f15\u3002\u7d22\u5f15\u53ef\u4ee5\u5728\u6a21\u578b\u6587\u6863\u4e2d\u7684meta\u4e2d\u6307\u5b9a\u7d22\u5f15\u5b57\u6bb5\u4ee5\u53ca\u7d22\u5f15\u65b9\u5411\u3002 \u53ef\u4ee5\u901a\u8fc7\u5728\u5b57\u6bb5\u540d\u524d\u52a0\u4e0a$\u6765\u6307\u5b9a\u6587\u672c\u7d22\u5f15\u3002\u53ef\u4ee5\u901a\u8fc7\u5728\u5b57\u6bb5\u540d\u524d\u52a0\u4e0a\uff03\u6765\u6307\u5b9a\u6563\u5217\u7d22\u5f15 2.3. Defining documents \u2014 MongoEngine 0.24.1 documentation class Page ( Document ): category = IntField () title = StringField () rating = StringField () created = DateTimeField () meta = { 'indexes' : [ 'title' , '$title' , # ====\u300b \u6587\u672c\u7d22\u5f15 '#title' , # =====\u300b \u54c8\u5e0c\u7d22\u5f15 ( 'title' , '-rating' ), ( 'category' , '_cls' ), { 'fields' : [ 'created' ], 'expireAfterSeconds' : 3600 # ====\u300b \u8bbe\u7f6e\u6587\u6863\u57283600\u79d2\u540e\u8fc7\u671f\uff0c\u6570\u636e\u5e93\u4f1a\u57283600\u79d2\u540e\u5220\u9664\u8fc7\u671f\u6587\u6863 } ] } \u5168\u5c40\u7d22\u5f15\u9ed8\u8ba4\u9009\u9879 class Page ( Document ): title = StringField () rating = StringField () meta = { 'index_opts' : {}, 'index_background' : True , 'index_cls' : False , 'auto_create_index' : True , 'index_drop_dups' : True , } \u53c2\u6570\u8bf4\u660e\uff1a index_opts : \u8bbe\u7f6e\u9ed8\u8ba4\u7d22\u5f15\u9009\u9879 index_background : \u4e3a True \u65f6\uff0c\u540e\u53f0\u521b\u5efa\u7d22\u5f15 index_cls : \u4e00\u79cd\u5173\u95ed _cls \u7684\u7279\u5b9a\u7d22\u5f15\u7684\u65b9\u6cd5 auto_create_index : \u9ed8\u8ba4\u4e3a True \u3002 MongoEngine \u5c06\u786e\u4fdd\u6bcf\u6b21\u8fd0\u884c\u547d\u4ee4\u65f6 MongoDB \u4e2d\u90fd\u5b58\u5728\u6b63\u786e\u7684\u7d22\u5f15\u3002\u53ef\u4ee5\u5728\u5355\u72ec\u7ba1\u7406\u7d22\u5f15\u7684\u7cfb\u7edf\u4e2d\u7981\u7528\u6b64\u529f\u80fd\u3002\u7981\u7528\u6b64\u529f\u80fd\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002","title":"2.4 \u7d22\u5f15 Indexes"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#25","text":"\u5982\u679c\u4f60\u60f3\u4e3a\u6587\u6863\u6dfb\u52a0\u4e00\u4e9b\u5c5e\u6027\uff0c\u4e14\u4e0d\u60f3\u589e\u52a0\u7ee7\u627f\u3002\u53ef\u4ee5\u4f7f\u7528\u5728 meta \u4e2d\u4f7f\u7528 abstract: True . \u793a\u4f8b\uff1a class BaseDynamicDocument ( DynamicDocument ): \"\"\"\u6240\u6709model\u90fd\u7ee7\u627f\u6b64\u7c7b, \u7edf\u4e00\u7684\u65b9\u6cd5\u5199\u5728\u6b64\u7c7b\u91cc\"\"\" meta = { 'abstract' : True } @classmethod def get_by_id ( cls , _id , only_active = True , raise_error = False ): _obj = None _obj = cls . find_one ( only_active = only_active , _id = _id ) if not _obj and raise_error : table_name = getattr ( cls , 'TABLE_NAME' , None ) if not table_name : raise Exception ( ' %s \u7c7b\u6ca1\u6709\u6307\u5b9aTABLE_NAME' % cls . __name__ ) content = 'get_by_id not found object. class_name: %s , table_name: %s , _id: %s ' % \\ ( cls . __name__ , table_name , _id ) logger_error . error ( content ) raise BaseError ( RetCodeAndMessage . Common . miss_obj ( table_name )) return _obj @classmethod def find_one ( cls , only_active = True , ** kwargs ): return cls . find ( only_active = only_active , ** kwargs ) . limit ( 1 ) . first () @classmethod def find ( cls , only_active = True , ** kwargs ): if only_active and 'deleted' not in kwargs and getattr ( cls , 'deleted' , None ) is not None : # \u8e22\u51fa\u88ab\u903b\u8f91\u5220\u9664\u7684\u6587\u6863 if isinstance ( getattr ( cls , 'deleted' , None ), BooleanField ): kwargs . update ({ 'deleted__ne' : True }) elif isinstance ( getattr ( cls , 'deleted' , None ), IntField ): kwargs . update ({ 'deleted__ne' : 1 }) return cls . objects ( ** kwargs ) @classmethod def create ( cls , ** kwargs ): if 'ts' not in kwargs . keys (): ts = time . time () else : ts = kwargs . get ( 'ts' ) if isinstance ( getattr ( cls , 'ts' , None ), FloatField ) and 'ts' not in kwargs . keys (): kwargs [ 'ts' ] = ts if isinstance ( getattr ( cls , 'create_time' , None ), StringField ) and 'create_time' not in kwargs . keys (): kwargs [ 'create_time' ] = DateUtil . timestamp_to_datetime_str ( ts ) if isinstance ( getattr ( cls , 'dt' , None ), StringField ) and 'dt' not in kwargs . keys (): kwargs [ 'dt' ] = DateUtil . timestamp_to_datetime_str ( ts , fmt = DateUtil . DATE_FORMAT ) if isinstance ( getattr ( cls , 'create_dt' , None ), StringField ) and 'create_dt' not in kwargs . keys (): kwargs [ 'create_dt' ] = DateUtil . timestamp_to_datetime_str ( ts , fmt = DateUtil . DATE_FORMAT ) return cls ( ** kwargs ) @classmethod def get_or_create ( cls , _id , only_active = True ): obj = cls . get_by_id ( _id , only_active = only_active ) if not obj : pk_name = getattr ( cls , '_meta' , {}) . get ( 'id_field' ) obj = cls . create ( ** { pk_name : _id }) return obj def delete ( self , db_del = False , ** write_concern ): if not db_del and getattr ( self , 'deleted' , None ) is not None : if hasattr ( self , 'delete_time' ): setattr ( self , 'delete_time' , DateUtil . datetime_to_str ()) if isinstance ( getattr ( self , 'deleted' , None ), BooleanField ) \\ or isinstance ( getattr ( self , 'deleted' , None ), bool ): setattr ( self , 'deleted' , True ) super ( BaseDynamicDocument , self ) . save () elif isinstance ( getattr ( self , 'deleted' , None ), IntField ) \\ or isinstance ( getattr ( self , 'deleted' , None ), int ): setattr ( self , 'deleted' , 1 ) super ( BaseDynamicDocument , self ) . save () else : DingTalkMessage () . send_msg ( 'class: %s deleted type: %s ' % ( self . __name__ , type ( getattr ( self , 'deleted' , None )))) else : super ( BaseDynamicDocument , self ) . delete ( ** write_concern ) @classmethod def delete_batch ( cls , db_del = False , ** kwargs ): \"\"\"\u6279\u91cf\u5220\u9664\"\"\" if not db_del and getattr ( cls , 'deleted' , None ) is not None : update_str = {} now = DateUtil . datetime_to_str () if hasattr ( cls , 'delete_time' ): update_str [ 'delete_time' ] = now if isinstance ( getattr ( cls , 'deleted' , None ), BooleanField ): update_str [ 'deleted' ] = True elif isinstance ( getattr ( cls , 'deleted' , None ), IntField ): update_str [ 'deleted' ] = 1 else : DingTalkMessage () . send_msg ( 'class: %s deleted type: %s ' % ( cls . __name__ , type ( getattr ( cls , 'deleted' , None )))) cls . find ( ** kwargs ) . update ( ** update_str ) else : cls . find ( ** kwargs ) . delete () @classmethod def get_batch_by_id ( cls , ids , only_active = True ): \"\"\"\u6279\u91cf\u83b7\u53d6obj_dict\"\"\" if not ids : return {} objs = cls . find ( _id__in = ids , only_active = only_active ) objs_dict = { obj . id : obj for obj in objs } return objs_dict @queryset_manager def objects_not_delete ( doc_cls , queryset ): return queryset . filter ( deleted = 0 )","title":"2.5 \u62bd\u8c61\u7c7b"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#26","text":"\u5b9e\u4f8b\u5316\u4e00\u4e2a\u5bf9\u8c61\u3002 class Page ( Document ): title = StringField ( max_length = 200 , required = True ) meta = { 'allow_inheritance' : True } >>> page = Page ( title = \"Test Page\" ) >>> page . title 'Test Page' \u6301\u4e45\u5316\u548c\u5220\u9664\u6587\u6863 \u4f7f\u7528 save() \u65b9\u6cd5\u5373\u53ef\u6301\u4e45\u5316\u6570\u636e >>> page = Page ( title = \"Test Page\" ) >>> page . save () # \u4fdd\u5b58 >>> page . title = \"My Page\" >>> page . save () # \u4fee\u6539title\u503c\u540e \u518d\u6b21\u4fdd\u5b58 >>> page . id ObjectId ( '123456789abcdef000000000' ) >>> page . pk # \u67e5\u627e\u4e3b\u952e ObjectId ( '123456789abcdef000000000' ) \u4f7f\u7528 delete \u5373\u53ef\u5220\u9664\u6587\u6863 delete ( signal_kwargs = None , ** write_concern ) # \u793a\u4f8b p = Page . objects ( title = 'My Page' ) . first () p . delete ()","title":"2.6 \u6587\u6863\u5b9e\u4f8b"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#27","text":"Document \u7c7b\u5177\u6709\u4e00\u4e2a objects \u5c5e\u6027\uff0c\u7528\u4e8e\u8bbf\u95ee\u4e0e\u7c7b\u5173\u8054\u7684\u6570\u636e\u5e93\u4e2d\u7684\u5bf9\u8c61\u3002\u8be5 objects \u5c5e\u6027\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a QuerySetManager \uff0c\u5b83\u5728\u8bbf\u95ee\u65f6\u521b\u5efa\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 QuerySet \u5bf9\u8c61, \u53ef\u4ee5\u8fed\u4ee3\u8be5\u5bf9\u8c61\u4ee5\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6587\u6863 \u4f7f\u7528\u793a\u4f8b\uff1a # \u67e5\u8be2\u51fa\u56fd\u5bb6\u662f\u82f1\u56fd\u7684\u6240\u6709\u7528\u6237 uk_users = User . objects ( country = 'uk' ) # auther\u662f\u4e00\u4e2a\u5d4c\u5165\u6587\u6863\u5b57\u6bb5\uff0ccountry\u662f\u5d4c\u5165\u6587\u6863\u7684field\uff0c\u901a\u8fc7auther__country\u7684\u65b9\u5f0f\u8bbf\u95ee\u503c uk_pages = Page . objects ( author__country = 'uk' ) # \u67e5\u8be218\u5c81\u4ee5\u4e0b\u7684\u7528\u6237 young_users = Users . objects ( age__lte = 18 ) \u5e38\u7528\u7684\u8fd0\u7b97\u7b26\u5982\u4e0b\uff1a ne : \u4e0d\u7b49\u4e8e lt \uff1a\u5c0f\u4e8e lte \uff1a \u5c0f\u4e8e\u7b49\u4e8e gt : \u5927\u4e8e gte \uff1a \u5927\u4e8e\u7b49\u4e8e in : \u5728\u5217\u8868\u4e2d nin \uff1a\u4e0d\u518d\u503c\u5217\u8868\u4e2d all \uff1a \u63d0\u4f9b\u7684\u503c\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u9879\u76ee\u90fd\u5728\u6570\u7ec4\u4e2d\uff08\u67e5\u8be2\u7ed3\u679c\u96c6\u4e3a\u7ed9\u5b9a\u503c\u96c6\u7684\u5b50\u96c6\uff09 size \uff1a \u6570\u7ec4\u5927\u5c0f exists : \u5b57\u6bb5\u503c\u5b58\u5728","title":"2.7 \u67e5\u8be2\u6587\u6863"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_10","text":"\u4ee5\u4e0b\u8fd0\u7b97\u7b26\u53ef\u7528\u4f5c\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u67e5\u8be2\uff1a exact - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4e0e\u503c\u5b8c\u5168\u5339\u914d iexact - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4e0e\u503c\u5b8c\u5168\u5339\u914d\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09 contains - \u5b57\u7b26\u4e32\u5b57\u6bb5\u5305\u542b\u503c icontains - \u5b57\u7b26\u4e32\u5b57\u6bb5\u5305\u542b\u503c\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09 startswith - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4ee5\u503c\u5f00\u5934 istartswith - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4ee5\u503c\u5f00\u5934\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09 endswith - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4ee5\u503c\u7ed3\u5c3e iendswith - \u5b57\u7b26\u4e32\u5b57\u6bb5\u4ee5\u503c\u7ed3\u5c3e\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09 match - \u6267\u884c$ elemMatch\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u5339\u914d\u6570\u7ec4\u4e2d\u7684\u6574\u4e2a\u6587\u6863","title":"\u5b57\u7b26\u4e32\u67e5\u8be2"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_11","text":"\u5982\u679c\u5e0c\u671b\u4f7f\u7528pymongo\u64cd\u4f5c\u6570\u636e\u5e93\uff0c\u53ef\u4ee5\u4f7f\u7528__raw__\u5173\u952e\u5b57\uff1a Page . objects ( __raw__ = { 'tags' : 'coding' }) PyMongo \u2014 MongoDB Drivers","title":"\u539f\u59cb\u67e5\u8be2"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_12","text":"# \u67e5\u8be2\u524d\u4e94\u6761\u6587\u6863 users = User . objects [: 5 ] # \u67e5\u8be2\u7b2c\u516d\u6761\u4ee5\u540e\u7684\u6240\u6709\u6587\u6863 users = User . objects [ 5 :] # \u67e5\u8be2\u7b2c\u5341\u4e00\u5230\u7b2c\u5341\u4e94\u6761\u6587\u6863 users = User . objects [ 10 : 15 ] >>> # \u786e\u8ba4\u6570\u636e\u5e93\u4e2d\u4e0d\u5b58\u5728\u6587\u6863 >>> User . drop_collection () >>> User . objects [ 0 ] IndexError : list index out of range === \u300b \u62a5IndexError\u7684\u9519 >>> User . objects . first () == None True >>> User ( name = 'Test User' ) . save () >>> User . objects [ 0 ] == User . objects . first () True","title":"\u9650\u5236\u4e0e\u8df3\u8fc7\u67e5\u8be2"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_13","text":"\u5e38\u7528\u805a\u5408\u67e5\u8be2\u793a\u4f8b\uff1a # \u6c42\u603b\u6570 num_users = User . objects . count () # \u6c42\u548c yearly_expense = Employee . objects . sum ( 'salary' ) # \u6c42\u5e73\u5747\u503c mean_age = User . objects . average ( 'age' )","title":"\u805a\u5408\u67e5\u8be2"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_14","text":"\u641c\u7d22\u6587\u6863\u5b50\u96c6 >>> class Film ( Document ): ... title = StringField () ... year = IntField () ... rating = IntField ( default = 3 ) ... >>> Film ( title = 'The Shawshank Redemption' , year = 1994 , rating = 5 ) . save () >>> f = Film . objects . only ( 'title' ) . first () >>> f . title 'The Shawshank Redemption' >>> f . year # None >>> f . rating # default value 3 post = BlogPost . objects . exclude ( 'title' ) . exclude ( 'author.name' ) # \u67e5\u8be2\u51fa\u9664\u4e86title\u548cauther.name\u5b57\u6bb5\u7684\u5185\u5bb9","title":"\u9650\u5236\u67e5\u8be2"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_15","text":"\u5982\u679c\u5e0c\u671b\u901a\u8fc7 or \u6216\u8005 and \u6765\u591a\u6761\u4ef6\u67e5\u8be2\u65f6\uff0c\u9700\u8981\u4f7f\u7528 Q(\u6761\u4ef6\u8bed\u53e51) | Q(\u6761\u4ef6\u8bed\u53e52) Q(\u6761\u4ef6\u8bed\u53e51) | Q(\u6761\u4ef6\u8bed\u53e52) from mongoengine.queryset.visitor import Q # \u83b7\u53d6\u5df2\u53d1\u5e03\u7684\u6587\u6863 Post . objects ( Q ( published = True ) | Q ( publish_date__lte = datetime . now ())) # \u83b7\u53d6 featured\u4e3a\u771f \u540c\u65f6 hits\u5927\u4e8e\u7b49\u4e8e1000\u6216\u5927\u4e8e\u7b49\u4e8e5000 \u7684\u6587\u6863 Post . objects (( Q ( featured = True ) & Q ( hits__gte = 1000 )) | Q ( hits__gte = 5000 ))","title":"\u9ad8\u7ea7\u67e5\u8be2"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_16","text":"\u66f4\u65b0\u65b9\u6cd5\u6709\uff1a update(), update_one(), modify() \u66f4\u65b0\u4fee\u9970\u7b26\u6709\uff1a set - \u91cd\u65b0\u8bbe\u7f6e\u4e00\u4e2a\u503c unset - \u5220\u9664 inc - \u52a0 dec - \u51cf push - \u5c06\u65b0\u503c\u6dfb\u52a0\u5230\u5217\u8868\u4e2d push_all - \u5c06\u591a\u4e2a\u503c\u6dfb\u52a0\u5230\u5217\u8868\u4e2d pop - \u6839\u636e\u503c\u5220\u9664\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u6216\u6700\u540e\u4e00\u4e2a\u5143\u7d20 pull - \u4ece\u5217\u8868\u4e2d\u5220\u9664\u503c pull_all - \u4ece\u5217\u8868\u4e2d\u5220\u9664\u591a\u4e2a\u503c add_to_set - \u4ec5\u5f53\u5217\u8868\u4e2d\u7684\u503c\u4e0d\u5728\u5217\u8868\u4e2d\u65f6\u624d\u4e3a\u5176\u6dfb\u52a0\u503c >>> post = BlogPost ( title = 'Test' , page_views = 0 , tags = [ 'database' ]) >>> post . save () >>> BlogPost . objects ( id = post . id ) . update_one ( inc__page_views = 1 ) >>> post . reload () # \u503c\u5df2\u88ab\u4fee\u6539\uff0c\u91cd\u65b0\u52a0\u8f7d\u6570\u636e >>> post . page_views 1 >>> BlogPost . objects ( id = post . id ) . update_one ( set__title = 'Example Post' ) >>> post . reload () >>> post . title 'Example Post' >>> BlogPost . objects ( id = post . id ) . update_one ( push__tags = 'nosql' ) >>> post . reload () >>> post . tags [ 'database' , 'nosql' ] \u26a0\ufe0f\u6ce8\u610f\uff1a\u5982\u679c\u672a\u6307\u5b9a\u4fee\u9970\u8fd0\u7b97\u7b26\uff0c\u5219\u9ed8\u8ba4\u4e3a $set .\u5373\u4e0b\u9762\u4e24\u79cd\u5199\u6cd5\u662f\u4e00\u6837\u7684 >>> BlogPost . objects ( id = post . id ) . update ( title = 'Example Post' ) >>> BlogPost . objects ( id = post . id ) . update ( set__title = 'Example Post' ) MongoEngine\u4e2d\u6587\u6587\u6863 - zhenyuantg - \u535a\u5ba2\u56ed (cnblogs.com)","title":"\u539f\u5b50\u66f4\u65b0"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#celery","text":"Celery - \u7b80\u4e66 (jianshu.com)","title":"celery"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AFPython%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E8%A7%A3%E7%AD%94%E6%96%87%E6%A1%A3/#_17","text":"\u56e0\u4e3a\u8be5\u9879\u76ee\u5ba2\u6237\u7aef\u4e3a Android App \uff0c\u6240\u4ee5 App \u8bbf\u95ee\u7684\u8d44\u6e90\u9700\u8981\u901a\u8fc7\u6293\u5305\u5de5\u5177\u8fdb\u884c\u786e\u8ba4\u3002 \u76ee\u524d\u516c\u53f8\u5185\u6240\u4f7f\u7528\u7684\u5de5\u5177\u662f mac OS \u4e0a\u7684 Charles ,\u4f7f\u7528\u8be5\u5de5\u5177\u53ea\u9700\u5c06\u624b\u673a\u4e0a\u7684 wifi \u914d\u7f6e\u597d\u6307\u5b9a\u7684\u4ee3\u7406\u5373\u53ef\u3002 \u53ef\u53c2\u89c1\u6b64\u6587\u6863\u8fdb\u884c\u8bbe\u7f6e\uff1a Charles \u624b\u673a\u6293\u5305\u8bb0\u5f55 \u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u6253\u5f00 App \u5373\u53ef\u770b\u5230\u6293\u5305\u8bb0\u5f55\u3002","title":"\u6293\u5305\u5f00\u53d1"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/","text":"\u8bf4\u660e \u00b6 \u7528\u4e8e\u5e2e\u52a9\u540e\u7aef\u5f00\u53d1\u4eba\u5458\u8fc5\u901f\u719f\u6089 \u8fdb\u5708 \u7684\u5f00\u53d1\u6d41\u7a0b\u548c\u5f00\u53d1\u89c4\u8303\u3002 \u4eba\u5458\u8bf4\u660e \u00b6 \u540e\u7aef\u5206\u4e3a\u4e24\u7ec4\uff0c\u7528\u6765\u534f\u540c\u5f00\u53d1\uff0c\u5feb\u901f\u8fed\u4ee3\u3002 \u8bf7\u6ce8\u610f\u81ea\u5df1\u7684\u7ec4\u522b\uff0c\u9489\u9489\u7fa4\u4e2d\u4f1a\u6709\u76f8\u5173\u7684\u6d88\u606f\u662f\u6309\u7ec4\u901a\u77e5\u7684\u3002 \u9700\u6c42\u5f00\u53d1\u6d41\u7a0b \u00b6 \u6bcf\u6b21\u9700\u6c42\u5f00\u53d1\u65f6\u95f4\u4e0a\u57fa\u672c\u662f\u4ee5 \u4e24\u4e2a\u661f\u671f \u4e3a\u4e00\u4e2a\u7248\u672c\u57fa\u51c6\u3002 \u7b80\u7248\u9700\u6c42\u6d41\u7a0b\u5982\u4e0b\u6240\u793a\uff1a sequenceDiagram participant \u9700\u6c42 participant \u4ea7\u54c1 participant \u5f00\u53d1 participant \u6d4b\u8bd5 Note over \u9700\u6c42,\u6d4b\u8bd5 : \u5468\u4e00 \u5f00\u53d1 -->> \u9700\u6c42 : \u4e0a\u5468\u7684\u9700\u6c42\u4e0a\u7ebf \u5f00\u53d1 ->> \u6d4b\u8bd5 : \u4e0a\u5468\u9700\u6c42\u9a8c\u8bc1 \u9700\u6c42 ->> \u4ea7\u54c1 : \u9700\u6c42\u8c03\u7814 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u9700\u6c42\u9884\u5ba1\uff08\u5468\u4e8c\uff09 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u9700\u6c42\u8bc4\u5ba1\uff08\u5468\u4e09\uff09 \u4ea7\u54c1 ->> \u5f00\u53d1 : \u65b0\u9700\u6c42 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u5468\u56db\u3001\u5468\u4e94\uff08\u6d4b\u8bd5\u7528\u4f8b\u8bc4\u5ba1\uff09\u4e0b\u5468\u4e00\uff08\u7ad9\u4f1a\u786e\u8ba4\u8fdb\u5ea6\uff09 \u5f00\u53d1 -->> \u4ea7\u54c1 : \u9700\u6c42\u7ec6\u8282\u786e\u8ba4\u53ca\u95ee\u9898\u53cd\u9988 \u5f00\u53d1 -->> \u5f00\u53d1 : \u9700\u6c42\u5b9e\u73b0 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u4e0b\u5468\u4e8c \u5f00\u53d1 ->> + \u6d4b\u8bd5 : \u9700\u6c42\u63d0\u6d4b \u6d4b\u8bd5 -->> - \u5f00\u53d1 : \u76f8\u5173 bug \u53cd\u9988 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u4e0b\u5468\u56db \u5f00\u53d1 -->> \u9700\u6c42 : \u7070\u5ea6\u6d4b\u8bd5 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u4e0b\u5468\u4e94\uff08\u5c01\u7248\uff09 \u5f00\u53d1 -->> \u9700\u6c42 : \u9700\u6c42\u6307\u6807\u89c2\u5bdf Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u4e0b\u4e0b\u5468\u4e00 \u4e0a\u7ebf \u53c2\u8003\uff1a \u65e5\u5e38\u9700\u6c42\u5f00\u53d1\u76f8\u5173\u6d41\u7a0b - \u76d2\u5b50\u540e\u7aef \u5f00\u53d1\u6d41\u7a0b\uff1a \u00b6 \u4ea7\u54c1\u63d0\u51fa\u9700\u6c42\uff0c\u7f16\u5199\u9700\u6c42\u6587\u6863\uff0c\u5f00\u9700\u6c42\u9884\u5ba1\u4f1a\u3002\u5ba1\u8ba1\u9700\u6c42 \u9879\u76ee\u9700\u6c42\u8bc4\u5ba1\u4f1a\u3002\u6587\u6863\u5f62\u5f0f\u7edf\u4e00\u8bf4\u660e\u9700\u6c42\u4efb\u52a1\u5e76\u5206\u914d\u7ed9\u6307\u5b9a\u5c0f\u7ec4\u3002 \u540e\u7aef\u5c0f\u7ec4\u518d\u6839\u636e\u5177\u4f53\u60c5\u51b5\u5206\u914d\u5177\u4f53\u4efb\u52a1\u3002\u4ee5\u6587\u6863\u5f62\u5f0f\u8bf4\u660e\u3002\uff08\u6b64\u65f6\u7ec4\u957f\u4f1a\u65b0\u5efa\u4e00\u4e2a\u6307\u5b9a\u7684\u7248\u672c\u4f5c\u4e3a\u9700\u6c42\u5f00\u53d1\u7684\u8d77\u59cb\u7248\u672c\uff0c\u5982 v22.04.06 .\u5176\u4ed6\u76f8\u5173\u5f00\u53d1\u4eba\u5458\u5e94\u4ee5\u6b64\u7248\u672c\u4e3a\u57fa\u7840\uff0c\u65b0\u5efa\u5f00\u53d1\u5206\u652f\uff0c\u81ea\u884c\u5f00\u53d1\uff09 \u81ea\u5df1\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u53ef\u8fdb\u884c\u81ea\u5df1\u7684\u6d4b\u8bd5\u3002 \u53ef\u4ee5\u672c\u5730\u6d4b\u8bd5\u3002 \u5982\u679c\u672c\u5730\u73af\u5883\u4e0d\u5168\u3002\u53ef\u4ee5\u901a\u8fc7\u5821\u5792\u673a\u767b\u5f55\u5230 poros-test \u673a\u5668\u4e0b\u7684 ~/hp/poros \u9879\u76ee\uff0c\u5207\u6362\u5230\u4f60\u7684\u5f00\u53d1\u5206\u652f\uff0c\u5e76\u4f7f\u7528 supervisorctl \u91cd\u542f\u76f8\u5173\u7684\u6539\u52a8\u3002\u5229\u7528\u6d4b\u8bd5\u673a\u7684 82 \u7aef\u53e3\u8fdb\u884c\u81ea\u6d4b \u81ea\u6d4b\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u8fdb\u884c\u672c\u5730\u5408\u5e76\u5230\u7248\u672c\u5206\u652f\uff08 v22.04.06 \uff09 \u4f7f\u7528\u6d4b\u8bd5\u673a\u5668 ~/poros \u6587\u4ef6\u5939\uff0c\u91cd\u542f supervisorctl \u76f8\u5173\u6539\u52a8\u3002\u4f7f\u7528 80 \u7aef\u53e3\u518d\u6b21\u6d4b\u8bd5\u3002 \u5f00\u53d1\u89c4\u8303 \u00b6 \u540e\u7aef\u7814\u53d1\u89c4\u8303\uff1a Git\u5de5\u4f5c\u6d41\u53ca\u4ee3\u7801\u63d0\u4ea4\u76f8\u5173 \u7f16\u7801\u89c4\u8303\uff08\u4e3e\u4f8b\u7bc7\uff09 \u7f16\u7801\u89c4\u8303\uff08\u57fa\u7840\u7bc7\uff09","title":"\u540e\u7aef\u5f00\u53d1\u6d41\u7a0b\u4e0e\u5f00\u53d1\u89c4\u8303"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/#_1","text":"\u7528\u4e8e\u5e2e\u52a9\u540e\u7aef\u5f00\u53d1\u4eba\u5458\u8fc5\u901f\u719f\u6089 \u8fdb\u5708 \u7684\u5f00\u53d1\u6d41\u7a0b\u548c\u5f00\u53d1\u89c4\u8303\u3002","title":"\u8bf4\u660e"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/#_2","text":"\u540e\u7aef\u5206\u4e3a\u4e24\u7ec4\uff0c\u7528\u6765\u534f\u540c\u5f00\u53d1\uff0c\u5feb\u901f\u8fed\u4ee3\u3002 \u8bf7\u6ce8\u610f\u81ea\u5df1\u7684\u7ec4\u522b\uff0c\u9489\u9489\u7fa4\u4e2d\u4f1a\u6709\u76f8\u5173\u7684\u6d88\u606f\u662f\u6309\u7ec4\u901a\u77e5\u7684\u3002","title":"\u4eba\u5458\u8bf4\u660e"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/#_3","text":"\u6bcf\u6b21\u9700\u6c42\u5f00\u53d1\u65f6\u95f4\u4e0a\u57fa\u672c\u662f\u4ee5 \u4e24\u4e2a\u661f\u671f \u4e3a\u4e00\u4e2a\u7248\u672c\u57fa\u51c6\u3002 \u7b80\u7248\u9700\u6c42\u6d41\u7a0b\u5982\u4e0b\u6240\u793a\uff1a sequenceDiagram participant \u9700\u6c42 participant \u4ea7\u54c1 participant \u5f00\u53d1 participant \u6d4b\u8bd5 Note over \u9700\u6c42,\u6d4b\u8bd5 : \u5468\u4e00 \u5f00\u53d1 -->> \u9700\u6c42 : \u4e0a\u5468\u7684\u9700\u6c42\u4e0a\u7ebf \u5f00\u53d1 ->> \u6d4b\u8bd5 : \u4e0a\u5468\u9700\u6c42\u9a8c\u8bc1 \u9700\u6c42 ->> \u4ea7\u54c1 : \u9700\u6c42\u8c03\u7814 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u9700\u6c42\u9884\u5ba1\uff08\u5468\u4e8c\uff09 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u9700\u6c42\u8bc4\u5ba1\uff08\u5468\u4e09\uff09 \u4ea7\u54c1 ->> \u5f00\u53d1 : \u65b0\u9700\u6c42 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u5468\u56db\u3001\u5468\u4e94\uff08\u6d4b\u8bd5\u7528\u4f8b\u8bc4\u5ba1\uff09\u4e0b\u5468\u4e00\uff08\u7ad9\u4f1a\u786e\u8ba4\u8fdb\u5ea6\uff09 \u5f00\u53d1 -->> \u4ea7\u54c1 : \u9700\u6c42\u7ec6\u8282\u786e\u8ba4\u53ca\u95ee\u9898\u53cd\u9988 \u5f00\u53d1 -->> \u5f00\u53d1 : \u9700\u6c42\u5b9e\u73b0 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u4e0b\u5468\u4e8c \u5f00\u53d1 ->> + \u6d4b\u8bd5 : \u9700\u6c42\u63d0\u6d4b \u6d4b\u8bd5 -->> - \u5f00\u53d1 : \u76f8\u5173 bug \u53cd\u9988 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u4e0b\u5468\u56db \u5f00\u53d1 -->> \u9700\u6c42 : \u7070\u5ea6\u6d4b\u8bd5 Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u4e0b\u5468\u4e94\uff08\u5c01\u7248\uff09 \u5f00\u53d1 -->> \u9700\u6c42 : \u9700\u6c42\u6307\u6807\u89c2\u5bdf Note over \u4ea7\u54c1,\u6d4b\u8bd5 : \u4e0b\u4e0b\u5468\u4e00 \u4e0a\u7ebf \u53c2\u8003\uff1a \u65e5\u5e38\u9700\u6c42\u5f00\u53d1\u76f8\u5173\u6d41\u7a0b - \u76d2\u5b50\u540e\u7aef","title":"\u9700\u6c42\u5f00\u53d1\u6d41\u7a0b"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/#_4","text":"\u4ea7\u54c1\u63d0\u51fa\u9700\u6c42\uff0c\u7f16\u5199\u9700\u6c42\u6587\u6863\uff0c\u5f00\u9700\u6c42\u9884\u5ba1\u4f1a\u3002\u5ba1\u8ba1\u9700\u6c42 \u9879\u76ee\u9700\u6c42\u8bc4\u5ba1\u4f1a\u3002\u6587\u6863\u5f62\u5f0f\u7edf\u4e00\u8bf4\u660e\u9700\u6c42\u4efb\u52a1\u5e76\u5206\u914d\u7ed9\u6307\u5b9a\u5c0f\u7ec4\u3002 \u540e\u7aef\u5c0f\u7ec4\u518d\u6839\u636e\u5177\u4f53\u60c5\u51b5\u5206\u914d\u5177\u4f53\u4efb\u52a1\u3002\u4ee5\u6587\u6863\u5f62\u5f0f\u8bf4\u660e\u3002\uff08\u6b64\u65f6\u7ec4\u957f\u4f1a\u65b0\u5efa\u4e00\u4e2a\u6307\u5b9a\u7684\u7248\u672c\u4f5c\u4e3a\u9700\u6c42\u5f00\u53d1\u7684\u8d77\u59cb\u7248\u672c\uff0c\u5982 v22.04.06 .\u5176\u4ed6\u76f8\u5173\u5f00\u53d1\u4eba\u5458\u5e94\u4ee5\u6b64\u7248\u672c\u4e3a\u57fa\u7840\uff0c\u65b0\u5efa\u5f00\u53d1\u5206\u652f\uff0c\u81ea\u884c\u5f00\u53d1\uff09 \u81ea\u5df1\u5f00\u53d1\u5b8c\u6210\u540e\uff0c\u53ef\u8fdb\u884c\u81ea\u5df1\u7684\u6d4b\u8bd5\u3002 \u53ef\u4ee5\u672c\u5730\u6d4b\u8bd5\u3002 \u5982\u679c\u672c\u5730\u73af\u5883\u4e0d\u5168\u3002\u53ef\u4ee5\u901a\u8fc7\u5821\u5792\u673a\u767b\u5f55\u5230 poros-test \u673a\u5668\u4e0b\u7684 ~/hp/poros \u9879\u76ee\uff0c\u5207\u6362\u5230\u4f60\u7684\u5f00\u53d1\u5206\u652f\uff0c\u5e76\u4f7f\u7528 supervisorctl \u91cd\u542f\u76f8\u5173\u7684\u6539\u52a8\u3002\u5229\u7528\u6d4b\u8bd5\u673a\u7684 82 \u7aef\u53e3\u8fdb\u884c\u81ea\u6d4b \u81ea\u6d4b\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u8fdb\u884c\u672c\u5730\u5408\u5e76\u5230\u7248\u672c\u5206\u652f\uff08 v22.04.06 \uff09 \u4f7f\u7528\u6d4b\u8bd5\u673a\u5668 ~/poros \u6587\u4ef6\u5939\uff0c\u91cd\u542f supervisorctl \u76f8\u5173\u6539\u52a8\u3002\u4f7f\u7528 80 \u7aef\u53e3\u518d\u6b21\u6d4b\u8bd5\u3002","title":"\u5f00\u53d1\u6d41\u7a0b\uff1a"},{"location":"liquidnetwork/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E4%B8%8E%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/#_5","text":"\u540e\u7aef\u7814\u53d1\u89c4\u8303\uff1a Git\u5de5\u4f5c\u6d41\u53ca\u4ee3\u7801\u63d0\u4ea4\u76f8\u5173 \u7f16\u7801\u89c4\u8303\uff08\u4e3e\u4f8b\u7bc7\uff09 \u7f16\u7801\u89c4\u8303\uff08\u57fa\u7840\u7bc7\uff09","title":"\u5f00\u53d1\u89c4\u8303"}]}